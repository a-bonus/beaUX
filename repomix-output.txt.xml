This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.repomix/
  bundles.json
public/
  beaux-logo.svg
  favicon.svg
  new-beaux-logo.svg
src/
  components/
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
    AIComponentGenerator.tsx
    AIReactNativeGenerator.tsx
    CodeEditor.tsx
    ComponentCard.tsx
    ComponentLibrary.tsx
    DiagramEditor.tsx
    ExpoSnackPreview.tsx
    Footer.tsx
    Header.tsx
    HelloWorldButton.tsx
    LivePreview.tsx
  hooks/
    use-mobile.tsx
    use-toast.ts
  lib/
    utils.ts
  pages/
    Home.tsx
    NotFound.tsx
  utils/
    components/
      buttons.ts
      index.ts
      inputs.ts
      layout.ts
    defaultCode.ts
    defaultComponents.ts
    gridPattern.css
    openRouterApi.ts
    transformCode.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.example
.gitignore
components.json
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".repomix/bundles.json">
{
  "bundles": {}
}
</file>

<file path="public/beaux-logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 200">
  <!-- Text with gradient fill -->
  <defs>
    <linearGradient id="logoGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" stop-color="#1d3b45" />
      <stop offset="20%" stop-color="#207076" />
      <stop offset="40%" stop-color="#20adb6" />
      <stop offset="60%" stop-color="#44a9dd" />
      <stop offset="80%" stop-color="#7c8cee" />
      <stop offset="100%" stop-color="#a87bff" />
    </linearGradient>
  </defs>
  
  <!-- Main text -->
  <text x="50" y="130" font-family="Arial, sans-serif" font-size="120" font-weight="bold" fill="url(#logoGradient)">
    beaUX
  </text>
</svg>
</file>

<file path="public/new-beaux-logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 120">
  <!-- Gradient definitions -->
  <defs>
    <linearGradient id="logoGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" stop-color="#1d3b45" />
      <stop offset="20%" stop-color="#207076" />
      <stop offset="40%" stop-color="#20adb6" />
      <stop offset="60%" stop-color="#44a9dd" />
      <stop offset="80%" stop-color="#7c8cee" />
      <stop offset="100%" stop-color="#a87bff" />
    </linearGradient>
    
    <filter id="softShadow" x="-10%" y="-10%" width="120%" height="120%">
      <feDropShadow dx="0" dy="1" stdDeviation="1" flood-color="#000" flood-opacity="0.2" />
    </filter>
  </defs>
  
  <!-- Clean dark background -->
  <rect width="300" height="120" fill="#0a0e17" rx="8" ry="8" />
  
  <!-- Simplified icon to the left of the title -->
  <g transform="translate(40, 40)">
    <!-- Component box -->
    <rect x="0" y="10" width="30" height="20" rx="3" ry="3" fill="none" stroke="#5d6370" stroke-width="1.5" />
    
    <!-- Status indicator -->
    <circle cx="8" cy="20" r="3" fill="#4caf50" />
    
    <!-- Connection line -->
    <path d="M30 20 L40 20" stroke="#5d6370" stroke-width="1.5" />
    
    <!-- Hook element -->
    <rect x="40" y="10" width="30" height="20" rx="10" ry="10" fill="#7c4dff" opacity="0.9" />
  </g>
  
  <!-- Logo text - to the right of the icon -->
  <text x="120" y="68" font-family="Arial, sans-serif" font-size="32" font-weight="bold" fill="url(#logoGradient)" filter="url(#softShadow)">
    beaUX
  </text>
</svg>
</file>

<file path="src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="src/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/drawer.tsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/hover-card.tsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="src/components/ui/input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="src/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/resizable.tsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>

<file path="src/components/ui/sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/components/ui/sonner.tsx">
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="src/components/ui/switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="src/components/ui/tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/ui/use-toast.ts">
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };
</file>

<file path="src/components/CodeEditor.tsx">
import React, { useState, useRef, useEffect } from 'react';
import { cn } from '@/lib/utils';

interface CodeEditorProps {
  value: string;
  onChange: (code: string) => void;
  className?: string;
}

const CodeEditor: React.FC<CodeEditorProps> = ({
  value,
  onChange,
  className,
}) => {
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const [isFocused, setIsFocused] = useState(false);

  useEffect(() => {
    const adjustHeight = () => {
      const textarea = textareaRef.current;
      if (textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = `${textarea.scrollHeight}px`;
      }
    };

    adjustHeight();
    window.addEventListener('resize', adjustHeight);
    
    return () => {
      window.removeEventListener('resize', adjustHeight);
    };
  }, [value]);

  const handleIndent = (e: React.KeyboardEvent) => {
    if (e.key === 'Tab') {
      e.preventDefault();
      const start = textareaRef.current!.selectionStart;
      const end = textareaRef.current!.selectionEnd;

      const newValue = value.substring(0, start) + '  ' + value.substring(end);
      onChange(newValue);
      
      // Move the cursor to the right position after adding the spaces
      setTimeout(() => {
        textareaRef.current!.selectionStart = textareaRef.current!.selectionEnd = start + 2;
      }, 0);
    }
  };

  const lineNumbers = value.split('\n').length;
  const numbers = Array.from(Array(lineNumbers).keys()).map(i => i + 1);

  return (
    <div className={cn(
      "relative rounded-lg border overflow-hidden transition-all duration-200", 
      isFocused ? "ring-2 ring-ring" : "border-input",
      className
    )}>
      <div className="absolute left-0 top-0 flex flex-col items-end py-4 px-2 bg-muted/25 text-muted-foreground text-xs select-none opacity-80">
        {numbers.map(num => (
          <div key={num} className="leading-6">{num}</div>
        ))}
      </div>
      
      <textarea
        ref={textareaRef}
        value={value}
        onChange={(e) => onChange(e.target.value)}
        onKeyDown={handleIndent}
        onFocus={() => setIsFocused(true)}
        onBlur={() => setIsFocused(false)}
        className={cn(
          "code-editor bg-editor-bg text-editor-text dark:bg-editor-dark dark:text-editor-darkText",
          "w-full resize-none outline-none",
          "py-4 pr-4 pl-10",
          "rounded-lg border-0"
        )}
        placeholder="Write or paste your component code here..."
        spellCheck="false"
        autoCapitalize="none"
        autoComplete="off"
        autoCorrect="off"
      />
    </div>
  );
};

export default CodeEditor;
</file>

<file path="src/components/HelloWorldButton.tsx">
function HelloWorldButton() {
  function handleClick() {
    alert('Hello World!');
  }

  return (
    <button
      style={{
        padding: '10px',
        backgroundColor: 'blue',
        color: 'white',
        border: 'none',
        borderRadius: '5px',
        cursor: 'pointer', 
      }}
      onClick={handleClick}
    >
      Hello World
    </button>
  );
}

export default HelloWorldButton;
</file>

<file path="src/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="src/hooks/use-toast.ts">
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/NotFound.tsx">
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;
</file>

<file path="src/utils/components/index.ts">
import { buttonComponents } from './buttons';
import { layoutComponents } from './layout';
import { inputComponents } from './inputs';

export const allComponents = [
  ...buttonComponents,
  ...layoutComponents,
  ...inputComponents
];

// Export individual categories for more granular access if needed
export { buttonComponents, layoutComponents, inputComponents };
</file>

<file path="src/utils/defaultCode.ts">
// Default code for React Native components
export const defaultReactNativeCode = `import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';

function ExampleComponent() {
  const [count, setCount] = React.useState(0);
  
  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Hello React Native</Text>
      <Text style={styles.paragraph}>
        Start by editing this component or using the AI generator.
      </Text>
      <TouchableOpacity 
        style={styles.button}
        onPress={() => setCount(count + 1)}
      >
        <Text style={styles.buttonText}>Count: {count}</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#f5f5f5',
    borderRadius: 8,
    maxWidth: 300,
  },
  heading: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#111827',
  },
  paragraph: {
    fontSize: 14,
    lineHeight: 20,
    color: '#4b5563',
    marginBottom: 16,
  },
  button: {
    backgroundColor: '#3b82f6',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 4,
  },
  buttonText: {
    color: 'white',
    fontSize: 14,
    textAlign: 'center',
  },
});

export default ExampleComponent;`;

// Default code for React Web components
export const defaultReactWebCode = `function MyComponent() {
  const [count, setCount] = React.useState(0);
  
  return (
    <div style={{ 
      padding: '20px',
      borderRadius: '8px',
      backgroundColor: '#f3f4f6',
      maxWidth: '300px'
    }}>
      <h2 style={{ 
        margin: '0', 
        marginBottom: '10px',
        fontSize: '18px',
        fontWeight: '600',
        color: '#111827'
      }}>
        Hello beaUX
      </h2>
      
      <p style={{ 
        margin: '0',
        color: '#4b5563',
        fontSize: '14px',
        lineHeight: '1.5',
        marginBottom: '16px'
      }}>
        Start by editing this component or selecting from the library.
      </p>
      
      <button 
        onClick={() => setCount(count + 1)}
        style={{
          backgroundColor: '#3b82f6',
          color: 'white',
          border: 'none',
          borderRadius: '4px',
          padding: '8px 16px',
          fontSize: '14px',
          cursor: 'pointer'
        }}
      >
        Count: {count}
      </button>
    </div>
  );
}`;
</file>

<file path="src/utils/gridPattern.css">
.bg-grid-pattern {
  background-image: 
    linear-gradient(to right, rgba(203, 213, 225, 0.1) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(203, 213, 225, 0.1) 1px, transparent 1px);
}
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".env.example">
VITE_OPENROUTER_API_KEY=
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="eslint.config.js">
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));
</file>

<file path="public/favicon.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64">
  <!-- Gradient definition -->
  <defs>
    <linearGradient id="logoGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#1d3b45" />
      <stop offset="20%" stop-color="#207076" />
      <stop offset="40%" stop-color="#20adb6" />
      <stop offset="60%" stop-color="#44a9dd" />
      <stop offset="80%" stop-color="#7c8cee" />
      <stop offset="100%" stop-color="#a87bff" />
    </linearGradient>
  </defs>
  
  <!-- Background circle with gradient -->
  <circle cx="32" cy="32" r="30" fill="url(#logoGradient)"/>
  
  <!-- White "b" as the icon -->
  <path d="M28 44h-8V20h8c6.627 0 12 5.373 12 12s-5.373 12-12 12zm0-20h-4v16h4c4.418 0 8-3.582 8-8s-3.582-8-8-8z" fill="white"/>
</svg>
</file>

<file path="src/components/ComponentCard.tsx">
import React from 'react';
import { cn } from '@/lib/utils';
import { toast } from 'sonner';
import { transformCode } from '@/utils/transformCode';

interface ComponentCardProps {
  name: string;
  description: string;
  code: string;
  onSelect: (code: string) => void;
  className?: string;
}

const ComponentCard: React.FC<ComponentCardProps> = ({
  name,
  description,
  code,
  onSelect,
  className,
}) => {
  // Transform the code to render a preview
  const { Component, error } = transformCode(code);

  const handleCopy = (e: React.MouseEvent) => {
    e.stopPropagation();
    navigator.clipboard.writeText(code);
    toast.success('Component code copied to clipboard');
  };

  const handleSelect = () => {
    onSelect(code);
    toast.success(`${name} added to editor`);
  };

  return (
    <div
      className={cn(
        "group relative flex flex-col overflow-hidden rounded-lg border border-border/30 bg-card",
        "transition-all duration-300 hover:border-border/80 hover:shadow-lg hover:-translate-y-1",
        "cursor-pointer",
        className
      )}
      onClick={handleSelect}
    >
      {/* Preview Container - larger and more prominent */}
      <div className="relative aspect-[4/3] w-full overflow-hidden bg-secondary/40">
        <div className="absolute inset-0 flex items-center justify-center p-6">
          {error ? (
            <div className="text-xs text-destructive bg-destructive/10 p-2 rounded-md">Error rendering component</div>
          ) : Component ? (
            <div className="preview-container transform-gpu scale-100 transition-transform hover:scale-105">
              {React.createElement(Component)}
            </div>
          ) : (
            <div className="text-xs text-muted-foreground">No preview available</div>
          )}
        </div>
        
        {/* Overlay with buttons that appears on hover */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end justify-between p-3">
          <span className="text-white font-medium text-sm truncate max-w-[70%]">{name}</span>
          <div className="flex space-x-2">
            <button
              onClick={handleCopy}
              className="text-white bg-black/30 p-1.5 rounded-md hover:bg-black/50 transition-colors"
              aria-label="Copy component code"
            >
              <svg
                width="14"
                height="14"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <rect width="14" height="14" x="8" y="8" rx="2" ry="2" />
                <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />
              </svg>
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation();
                onSelect(code); 
                toast.success(`${name} added to editor`);
              }}
              className="text-white bg-primary/80 p-1.5 rounded-md hover:bg-primary transition-colors"
              aria-label="Use this component"
            >
              <svg
                width="14"
                height="14"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path d="m5 12 6 6 9-9" />
              </svg>
            </button>
          </div>
        </div>
      </div>
      
      {/* Component details */}
      <div className="p-3">
        <div className="mb-1.5 flex items-center justify-between">
          <h3 className="font-medium text-sm">{name}</h3>
        </div>
        <p className="text-muted-foreground text-xs line-clamp-2">{description}</p>
      </div>
    </div>
  );
};

export default ComponentCard;
</file>

<file path="src/components/ComponentLibrary.tsx">
import React, { useState, useEffect } from 'react';
import { cn } from '@/lib/utils';
import ComponentCard from './ComponentCard';
import { defaultComponents } from '@/utils/defaultComponents';

interface ComponentLibraryProps {
  onSelectComponent: (code: string) => void;
  className?: string;
  onSearch?: (query: string) => void;
  externalSearchQuery?: string;
}

type Category = 'all' | 'buttons' | 'layout' | 'inputs' | 'feedback' | 'badges' | 'avatars';

const ComponentLibrary: React.FC<ComponentLibraryProps> = ({
  onSelectComponent,
  className,
  onSearch,
  externalSearchQuery,
}) => {
  const [selectedCategory, setSelectedCategory] = useState<Category>('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [trendingTags, setTrendingTags] = useState<string[]>(['buttons', 'cards', 'forms', 'dark mode', 'gradients', 'animations']);

  // Sync with external search query if provided
  useEffect(() => {
    if (externalSearchQuery !== undefined) {
      setSearchQuery(externalSearchQuery);
    }
  }, [externalSearchQuery]);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const query = e.target.value;
    setSearchQuery(query);
    if (onSearch) {
      onSearch(query);
    }
  };

  const handleTagClick = (tag: string) => {
    setSearchQuery(tag);
    if (onSearch) {
      onSearch(tag);
    }
  };

  const filteredComponents = defaultComponents.filter(component => {
    const matchesCategory = selectedCategory === 'all' || component.category === selectedCategory;
    const matchesSearch = searchQuery === '' || 
      component.name.toLowerCase().includes(searchQuery.toLowerCase()) || 
      component.description.toLowerCase().includes(searchQuery.toLowerCase());
    
    return matchesCategory && matchesSearch;
  });

  const categories: { label: string; value: Category }[] = [
    { label: 'All', value: 'all' },
    { label: 'Buttons', value: 'buttons' },
    { label: 'Layout', value: 'layout' },
    { label: 'Inputs', value: 'inputs' },
    { label: 'Feedback', value: 'feedback' },
    { label: 'Badges', value: 'badges' },
    { label: 'Avatars', value: 'avatars' },
  ];

  // Random trending tags (simulated)
  useEffect(() => {
    // Shuffle trending tags every 24 hours in a real app
    const allTags = ['buttons', 'cards', 'forms', 'dark mode', 'gradients', 'animations', 
                     'dropdowns', 'modals', 'navigation', 'social', 'e-commerce', 'charts', 
                     'loaders', 'heroes', 'footers'];
    setTrendingTags(allTags.sort(() => 0.5 - Math.random()).slice(0, 6));
  }, []);

  return (
    <div className={cn("flex flex-col space-y-4 overflow-y-auto h-full", className)}>
      {/* Hero Section - similar to Unsplash */}
      {!searchQuery && selectedCategory === 'all' && (
        <div className="relative rounded-xl overflow-hidden bg-gradient-to-r from-primary/10 to-secondary/10 p-6 mb-4">
          <div className="absolute inset-0 bg-grid-pattern opacity-10"></div>
          <div className="relative z-10">
            <h1 className="text-2xl font-bold mb-2">The internet's source for reusable React components</h1>
            <p className="text-sm text-muted-foreground mb-4">
              Powered by creators everywhere
            </p>
            
            <div className="flex flex-wrap gap-2 mt-4">
              {trendingTags.map((tag) => (
                <button
                  key={tag}
                  onClick={() => handleTagClick(tag)}
                  className="rounded-full px-3 py-1 text-xs bg-background/80 backdrop-blur-sm hover:bg-background transition-colors"
                >
                  {tag}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Search bar - prominent like Unsplash */}
      <div className="relative">
        <svg
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
          className="absolute left-4 top-1/2 -translate-y-1/2 text-muted-foreground"
        >
          <circle cx="11" cy="11" r="8" />
          <path d="m21 21-4.3-4.3" />
        </svg>
        <input
          type="text"
          placeholder="Search for any component..."
          className="w-full rounded-full border border-input bg-background/80 backdrop-blur-sm pl-12 pr-4 py-3 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:border-transparent"
          value={searchQuery}
          onChange={handleSearchChange}
        />
      </div>
      
      {/* Categories */}
      <div className="flex flex-wrap gap-2 mt-2">
        {categories.map((category) => (
          <button
            key={category.value}
            onClick={() => setSelectedCategory(category.value)}
            className={cn(
              "rounded-full px-3 py-1 text-xs font-medium transition-colors",
              selectedCategory === category.value
                ? "bg-primary text-primary-foreground"
                : "bg-secondary text-secondary-foreground hover:bg-secondary/80"
            )}
          >
            {category.label}
          </button>
        ))}
      </div>

      {/* Results count */}
      {filteredComponents.length > 0 && (
        <div className="text-sm text-muted-foreground pb-1 border-b border-border/20">
          {filteredComponents.length} component{filteredComponents.length !== 1 ? 's' : ''} available
        </div>
      )}

      {/* Masonry-style grid - similar to Unsplash */}
      <div className="masonry-grid grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 gap-4 overflow-y-auto pr-2">
        {filteredComponents.length > 0 ? (
          filteredComponents.map((component, index) => (
            <ComponentCard
              key={component.id}
              name={component.name}
              description={component.description}
              code={component.code}
              onSelect={onSelectComponent}
              // Alternate sizes for masonry effect
              className={cn(
                "animate-fade-in",
                index % 3 === 0 ? "row-span-1" : index % 4 === 0 ? "row-span-2" : "row-span-1"
              )}
            />
          ))
        ) : (
          <div className="col-span-full flex flex-col items-center justify-center h-40 text-muted-foreground">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="mb-2 text-muted-foreground/50"
            >
              <path d="M10.29 3.86 1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
              <path d="M12 9v4"></path>
              <path d="M12 17h.01"></path>
            </svg>
            <p className="text-sm">No components match your search</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ComponentLibrary;
</file>

<file path="src/components/LivePreview.tsx">
import React, { useEffect, useState } from 'react';
import { cn } from '@/lib/utils';
import { transformCode } from '@/utils/transformCode';

interface LivePreviewProps {
  code: string;
  className?: string;
}

const LivePreview: React.FC<LivePreviewProps> = ({
  code,
  className,
}) => {
  const [renderKey, setRenderKey] = useState(0);
  const { Component, error } = transformCode(code);

  // Re-render when code changes with a slight delay to avoid excessive renders
  useEffect(() => {
    const timer = setTimeout(() => {
      setRenderKey(prev => prev + 1);
    }, 500);
    
    return () => clearTimeout(timer);
  }, [code]);

  return (
    <div className={cn(
      "flex flex-col h-full rounded-lg border border-input overflow-hidden",
      className
    )}>
      <div className="flex items-center justify-between bg-muted/60 py-2 px-4 border-b border-border/60">
        <h3 className="text-sm font-medium">Live Preview</h3>
        <div className="flex items-center space-x-1">
          <div className="h-2 w-2 rounded-full bg-red-500 opacity-70" />
          <div className="h-2 w-2 rounded-full bg-yellow-500 opacity-70" />
          <div className="h-2 w-2 rounded-full bg-green-500 opacity-70" />
        </div>
      </div>
      
      <div className="flex-1 bg-background flex items-center justify-center p-8 overflow-auto">
        <div className="relative w-full max-h-full overflow-auto">
          {error ? (
            <div className="p-4 rounded-md bg-destructive/10 border border-destructive/20 max-w-md">
              <h4 className="font-medium text-sm text-destructive mb-1">Rendering Error</h4>
              <pre className="text-xs text-destructive/90 whitespace-pre-wrap font-mono">{error}</pre>
            </div>
          ) : !Component ? (
            <div className="text-center animate-pulse-subtle">
              <div className="w-16 h-16 mx-auto mb-4 opacity-20">
                <svg 
                  viewBox="0 0 24 24" 
                  fill="none" 
                  stroke="currentColor" 
                  strokeWidth="1.5" 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  className="w-full h-full"
                >
                  <path d="M7 8h10" />
                  <path d="M7 12h4" />
                  <path d="M7 16h10" />
                  <rect width="18" height="18" x="3" y="3" rx="2" />
                </svg>
              </div>
              <p className="text-muted-foreground text-sm">
                Start writing code to see your component
              </p>
            </div>
          ) : (
            <div 
              key={renderKey} 
              className="preview-container animate-fade-in w-full"
            >
              {React.createElement(Component)}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default LivePreview;
</file>

<file path="src/pages/Home.tsx">
import React from 'react';
import Header from '../components/Header';
import { cn } from '@/lib/utils';
import Footer from '../components/Footer';
import DiagramEditor from '../components/DiagramEditor';

// Content for The Visual Architect section
const section = {
  id: 'visual-architect',
  title: 'The Visual Architect',
  description: 'Design, visualize, and plan your component architecture with an interactive canvas board. Create beautiful diagrams, add code snippets, notes, and organize your component relationships - all persisted for your convenience.',
  bgClass: 'bg-gradient-to-b from-slate-50/20 to-indigo-50/20 dark:from-slate-900/20 dark:to-indigo-950/10'
};

const Home: React.FC = () => {

  return (
    <div className="min-h-screen flex flex-col bg-background">
      <Header />
      
      <main className="flex-1">
        {/* The Visual Architect Section */}
        <section 
          id={section.id} 
          className={cn("min-h-screen py-8 px-2 flex flex-col items-center", section.bgClass)}
        >
          {/* More compact header */}
          <div className="text-center max-w-3xl mx-auto mb-6">
            <h1 className="text-4xl font-bold mb-3 bg-clip-text text-transparent bg-gradient-to-r from-purple-500 to-indigo-500">
              {section.title}
            </h1>
            <p className="text-base text-muted-foreground max-w-2xl mx-auto">
              {section.description}
            </p>
          </div>
          
          {/* Expanded diagram area */}
          <div className="w-full max-w-full mx-auto px-2 flex-1">
            <DiagramEditor />
          </div>
        </section>
      </main>
      
      <Footer />
    </div>
  );
};

export default Home;
</file>

<file path="src/utils/components/buttons.ts">
export const buttonComponents = [
  {
    id: 'button-primary',
    name: 'Primary Button',
    description: 'A standard primary button component',
    code: `function PrimaryButton() {
  const [clicked, setClicked] = React.useState(0);
  
  return (
    <button 
      style={{ 
        backgroundColor: '#007AFF',
        color: 'white',
        padding: '12px 24px',
        borderRadius: '8px',
        fontWeight: '500',
        border: 'none',
        cursor: 'pointer',
        fontSize: '14px',
        transition: 'background-color 0.2s'
      }}
      onClick={() => {
        setClicked(clicked + 1);
        console.log('Primary button clicked', clicked + 1);
      }}
    >
      Primary Button {clicked > 0 ? \`(Clicked \${clicked} times)\` : ''}
    </button>
  );
}`,
    category: 'buttons'
  },
  {
    id: 'button-secondary',
    name: 'Secondary Button',
    description: 'A bordered secondary button',
    code: `function SecondaryButton() {
  const [clicked, setClicked] = React.useState(0);
  
  return (
    <button 
      style={{ 
        backgroundColor: 'transparent',
        color: '#007AFF',
        padding: '12px 24px',
        borderRadius: '8px',
        fontWeight: '500',
        border: '1px solid #007AFF',
        cursor: 'pointer',
        fontSize: '14px',
        transition: 'all 0.2s'
      }}
      onClick={() => {
        setClicked(clicked + 1);
        console.log('Secondary button clicked', clicked + 1);
      }}
    >
      Secondary Button {clicked > 0 ? \`(Clicked \${clicked} times)\` : ''}
    </button>
  );
}`,
    category: 'buttons'
  }
];
</file>

<file path="src/utils/components/inputs.ts">
export const inputComponents = [
  {
    id: 'input-text',
    name: 'Text Input',
    description: 'A standard text input field',
    code: `function TextInput() {
  const [value, setValue] = React.useState('');
  
  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>
      <label 
        style={{ 
          fontSize: '14px',
          fontWeight: '500',
          marginBottom: '4px',
          color: '#333'
        }}
      >
        Label
      </label>
      <input 
        type="text"
        value={value}
        onChange={(e) => setValue(e.target.value)}
        placeholder="Enter text..."
        style={{ 
          padding: '12px 16px',
          borderRadius: '8px',
          border: '1px solid #E2E8F0',
          fontSize: '14px',
          outline: 'none',
          width: '100%',
          transition: 'border-color 0.2s'
        }}
      />
      {value && (
        <div style={{ marginTop: '8px', fontSize: '12px', color: '#666' }}>
          You typed: {value}
        </div>
      )}
    </div>
  );
}`,
    category: 'inputs'
  }
];
</file>

<file path="src/utils/components/layout.ts">
export const layoutComponents = [
  {
    id: 'card-basic',
    name: 'Basic Card',
    description: 'A simple card component with shadow',
    code: `function BasicCard() {
  const [expanded, setExpanded] = React.useState(false);
  
  return (
    <div 
      style={{ 
        padding: '24px',
        borderRadius: '12px',
        backgroundColor: 'white',
        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.08)',
        maxWidth: '300px'
      }}
    >
      <h3 style={{ 
        margin: '0',
        marginBottom: '8px',
        fontSize: '18px',
        fontWeight: '600'
      }}>
        Card Title
      </h3>
      <p style={{ 
        margin: '0',
        color: '#666',
        fontSize: '14px',
        lineHeight: '1.5',
        marginBottom: expanded ? '16px' : '0'
      }}>
        This is a simple card component with some sample content.
        {expanded && ' This additional text appears when the card is expanded. It demonstrates how React state can control UI elements.'}
      </p>
      
      {expanded && (
        <div style={{ 
          marginTop: '16px',
          padding: '12px',
          backgroundColor: '#f9fafb',
          borderRadius: '8px',
          fontSize: '13px'
        }}>
          Extra content area that appears when expanded
        </div>
      )}
      
      <button
        onClick={() => setExpanded(!expanded)}
        style={{
          marginTop: '16px',
          backgroundColor: 'transparent',
          color: '#3b82f6',
          border: 'none',
          padding: '0',
          fontSize: '14px',
          cursor: 'pointer',
          display: 'flex',
          alignItems: 'center',
          gap: '4px'
        }}
      >
        {expanded ? 'Show less' : 'Show more'}
      </button>
    </div>
  );
}`,
    category: 'layout'
  }
];
</file>

<file path="src/main.tsx">
import React from 'react';
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

// Make React available globally for the live preview component
// This enables our code transformation to work with JSX
window.React = React;

createRoot(document.getElementById("root")!).render(<App />);

// Add TypeScript declaration to avoid errors
declare global {
  interface Window {
    React: typeof React;
  }
}
</file>

<file path="package.json">
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@tanstack/react-query": "^5.56.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "html2canvas": "^1.4.1",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				editor: {
					bg: '#F8F8F8',
					dark: '#1E1E1E',
					text: '#333333',
					darkText: '#E0E0E0',
				},
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
			},
      boxShadow: {
        'subtle': '0 2px 10px rgba(0, 0, 0, 0.05)',
        'elevation': '0 20px 80px -20px rgba(0, 0, 0, 0.08)',
        'button': '0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1)',
      },
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 4px)',
				sm: 'calc(var(--radius) - 8px)'
			},
			keyframes: {
				'accordion-down': {
					from: { height: '0' },
					to: { height: 'var(--radix-accordion-content-height)' }
				},
				'accordion-up': {
					from: { height: 'var(--radix-accordion-content-height)' },
					to: { height: '0' }
				},
        'pulse-subtle': {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0.7' },
        },
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
        'pulse-subtle': 'pulse-subtle 3s ease-in-out infinite',
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;
</file>

<file path="src/components/Footer.tsx">
import React from 'react';
import { cn } from '@/lib/utils';
import { Github, Linkedin, Heart, Star } from 'lucide-react';

interface FooterProps {
  className?: string;
}

// Generate random stars for galaxy background
const generateStars = (count: number) => {
  const stars = [];
  for (let i = 0; i < count; i++) {
    const size = Math.random() * 2 + 1; // 1-3px
    const x = Math.random() * 100;
    const y = Math.random() * 100;
    const opacity = Math.random() * 0.7 + 0.3; // 0.3-1.0
    const animationDelay = Math.random() * 5;
    stars.push(
      <div 
        key={i}
        className="absolute rounded-full bg-white animate-pulse"
        style={{
          width: `${size}px`,
          height: `${size}px`,
          left: `${x}%`,
          top: `${y}%`,
          opacity: opacity,
          animationDelay: `${animationDelay}s`,
        }}
      />
    );
  }
  return stars;
};

const Footer: React.FC<FooterProps> = ({ className }) => {
  return (
    <footer className={cn(
      "w-full py-10 px-6 border-t border-white/10 relative overflow-hidden",
      "bg-black text-white/80",
      className
    )}>
      {/* Galaxy background with stars */}
      <div className="absolute inset-0 bg-gradient-to-b from-black via-[#0c0c1d] to-[#0f0923] opacity-90">
        {generateStars(100)}
      </div>
      
      <div className="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-8 relative z-10">
        {/* Logo and Tagline */}
        <div className="flex flex-col items-center md:items-start">
          <div className="flex items-center">
            <h3 className="text-2xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-primary via-cyan-400 to-purple-500">beaUX</h3>
          </div>
          <p className="mt-3 text-white/70 text-sm text-center md:text-left">
            The beautiful visual architecture design tool for React developers
          </p>
          <div className="mt-5 flex space-x-4">
            <a 
              href="https://github.com/a-bonus" 
              target="_blank" 
              rel="noopener noreferrer"
              className="text-white/70 hover:text-primary transition-colors"
            >
              <Github size={20} />
            </a>
            <a 
              href="https://linkedin.com/in/alainbonus" 
              target="_blank" 
              rel="noopener noreferrer" 
              className="text-white/70 hover:text-primary transition-colors"
            >
              <Linkedin size={20} />
            </a>
          </div>
        </div>
        
        {/* Quick Links */}
        <div className="flex flex-col items-center md:items-start">
          <h3 className="text-base font-semibold mb-4 text-white">Navigation</h3>
          <ul className="space-y-2">
            <li>
              <a 
                href="#visual-architect" 
                className="text-white/70 hover:text-primary transition-colors text-sm"
              >
                The Visual Architect
              </a>
            </li>
            <li>
              <a 
                href="https://github.com/a-bonus" 
                target="_blank"
                rel="noopener noreferrer"
                className="text-white/70 hover:text-primary transition-colors text-sm"
              >
                GitHub
              </a>
            </li>
          </ul>
        </div>
        
        {/* Canvas-inspired Element */}
        <div className="flex flex-col items-center md:items-start">
          <h3 className="text-base font-semibold mb-4 text-white">Canvas</h3>
          <div className="w-full max-w-xs h-32 rounded-md bg-[#121225] p-4 relative overflow-hidden grid place-items-center border border-white/10">
            {/* Canvas dots pattern */}
            <div className="absolute inset-0 opacity-20 grid-pattern"></div>
            
            {/* Sample nodes inspired by DiagramEditor */}
            <div className="absolute left-[20%] top-[30%] w-16 h-10 rounded-md bg-primary/80 shadow-md flex items-center justify-center text-white text-xs font-medium">
              Component
            </div>
            <div className="absolute right-[20%] top-[50%] w-16 h-10 rounded-md bg-purple-500/80 shadow-md flex items-center justify-center text-white text-xs font-medium">
              Hook
            </div>
            
            {/* Connection line */}
            <div className="absolute left-[36%] top-[35%] w-[30%] h-0.5 bg-white/40 rotate-12"></div>
            
            {/* Decorative star */}
            <Star size={16} className="absolute right-3 top-3 text-primary/60" />
          </div>
        </div>
      </div>
      
      <div className="mt-10 pt-6 border-t border-white/10 flex flex-col md:flex-row items-center justify-between text-sm text-white/60 relative z-10">
        <p> {new Date().getFullYear()} beaUX. All rights reserved.</p>
        <div className="flex items-center mt-4 md:mt-0">
          <span className="flex items-center">
            Made with <Heart size={14} className="mx-1 text-red-500" /> for the vibe coders
          </span>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
</file>

<file path="src/utils/defaultComponents.ts">
import { allComponents } from './components';

export const defaultComponents = allComponents;
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>beaUX</title>
    <meta name="description" content="A fast way to test React and React Native UI UX components" />
    <meta name="author" content="Lovable" />
    <meta property="og:image" content="/og-image.png" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    <link rel="alternate icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="mask-icon" href="/favicon.svg" color="#00E5C7" />
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="src/components/AIComponentGenerator.tsx">
import React, { useState } from 'react';
import { generateComponent } from '@/utils/openRouterApi';
import { cn } from '@/lib/utils';
import { transformCode } from '@/utils/transformCode';

interface AIComponentGeneratorProps {
  onGenerate: (code: string) => void;
  className?: string;
}

const AIComponentGenerator: React.FC<AIComponentGeneratorProps> = ({
  onGenerate,
  className,
}) => {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [generatedCode, setGeneratedCode] = useState<string>('');
  const [isEditing, setIsEditing] = useState(false);
  const [validationError, setValidationError] = useState<string | null>(null);

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      setError('Please enter a component description');
      return;
    }

    setIsGenerating(true);
    setError(null);
    setValidationError(null);

    try {
      const apiKey = import.meta.env.VITE_OPENROUTER_API_KEY;
      
      if (!apiKey) {
        throw new Error('OpenRouter API key is not configured');
      }
      
      const result = await generateComponent(prompt, apiKey);
      
      if (result.error) {
        throw new Error(result.error);
      }
      
      // Store the generated code instead of immediately passing it to parent
      setGeneratedCode(result.component);
      setIsEditing(true);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate component');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCodeChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setGeneratedCode(e.target.value);
  };

  const validateComponent = () => {
    try {
      // Use the transformCode function to validate if the component will render
      const { Component, error } = transformCode(generatedCode);
      
      if (error) {
        setValidationError(error);
        return false;
      }
      
      return true;
    } catch (err) {
      setValidationError(err instanceof Error ? err.message : 'Component validation failed');
      return false;
    }
  };

  const handleSave = () => {
    if (validateComponent()) {
      onGenerate(generatedCode);
      setIsEditing(false);
      setPrompt('');
    }
  };

  const handleCancel = () => {
    setIsEditing(false);
    setGeneratedCode('');
    setValidationError(null);
  };

  // Auto-fix common issues in the generated code
  const handleAutoFix = () => {
    let fixedCode = generatedCode;
    
    // Fix useState without React prefix
    fixedCode = fixedCode.replace(/\bconst\s+\[\w+,\s*\w+\]\s*=\s*useState\(/g, 
                                 'const [$1, $2] = React.useState(');
    
    // Fix useEffect without React prefix
    fixedCode = fixedCode.replace(/\buseEffect\(/g, 'React.useEffect(');
    
    // Fix useRef without React prefix
    fixedCode = fixedCode.replace(/\buseRef\(/g, 'React.useRef(');
    
    // Fix other common hooks
    fixedCode = fixedCode.replace(/\buseCallback\(/g, 'React.useCallback(');
    fixedCode = fixedCode.replace(/\buseMemo\(/g, 'React.useMemo(');
    
    // Remove import statements
    fixedCode = fixedCode.replace(/^import.*from\s+['"].*['"];?\n?/gm, '');
    
    setGeneratedCode(fixedCode);
    validateComponent();
  };

  return (
    <div className={cn(
      "rounded-lg border border-input p-4 bg-background",
      className
    )}>
      <h3 className="text-sm font-medium mb-3">AI Component Generator</h3>
      
      {!isEditing ? (
        <div className="space-y-3">
          <div className="space-y-2">
            <label htmlFor="prompt" className="text-xs text-muted-foreground block">
              Component Description
            </label>
            <textarea
              id="prompt"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              className="w-full min-h-[100px] resize-y rounded-md border border-input px-3 py-2"
              placeholder="E.g., Create a dark mode toggle button with a sun/moon icon"
            />
          </div>
          
          <button
            onClick={handleGenerate}
            disabled={isGenerating}
            className={cn(
              "w-full py-2 px-4 rounded-md bg-primary text-primary-foreground text-sm",
              isGenerating && "opacity-70 cursor-not-allowed"
            )}
          >
            {isGenerating ? "Generating..." : "Generate Component"}
          </button>
          
          {error && (
            <div className="text-sm text-red-500 mt-2">
              {error}
            </div>
          )}
        </div>
      ) : (
        <div className="space-y-3">
          <div className="flex justify-between items-center">
            <h4 className="text-sm font-medium">Review & Edit Component</h4>
            <button
              onClick={handleAutoFix}
              className="text-xs bg-amber-100 text-amber-800 px-2 py-1 rounded-md"
            >
              Auto-Fix Common Issues
            </button>
          </div>
          
          <div className="space-y-2">
            <textarea
              value={generatedCode}
              onChange={handleCodeChange}
              className="w-full min-h-[200px] resize-y rounded-md border border-input px-3 py-2 font-mono text-sm"
            />
          </div>
          
          {validationError && (
            <div className="text-sm text-red-500 mt-2">
              <p className="font-medium">Validation Error:</p>
              <p>{validationError}</p>
            </div>
          )}
          
          <div className="flex space-x-2">
            <button
              onClick={handleSave}
              className="flex-1 py-2 px-4 rounded-md bg-primary text-primary-foreground text-sm"
            >
              Save & Preview
            </button>
            <button
              onClick={handleCancel}
              className="py-2 px-4 rounded-md bg-secondary text-secondary-foreground text-sm"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default AIComponentGenerator;
</file>

<file path="src/components/AIReactNativeGenerator.tsx">
import React, { useState } from 'react';
import { generateReactNativeComponent } from '@/utils/openRouterApi';
import { cn } from '@/lib/utils';

interface AIReactNativeGeneratorProps {
  onGenerate: (code: string, prompt: string) => void;
  className?: string;
}

function AIReactNativeGenerator({ 
  onGenerate,
  className,
}: AIReactNativeGeneratorProps) {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [chatHistory, setChatHistory] = useState<Array<{role: string, content: string, code?: string}>>([]);
  
  const handleGenerate = async () => {
    if (!prompt.trim()) {
      setError('Please enter a component description');
      return;
    }

    setIsGenerating(true);
    setError(null);
    
    // Add user message to chat history
    setChatHistory(prev => [...prev, { role: 'user', content: prompt }]);

    try {
      const apiKey = import.meta.env.VITE_OPENROUTER_API_KEY;
      
      if (!apiKey) {
        throw new Error('OpenRouter API key is not configured');
      }
      
      const result = await generateReactNativeComponent(prompt, apiKey, chatHistory);
      
      if (result.error) {
        throw new Error(result.error);
      }
      
      // Add AI response to chat history
      setChatHistory(prev => [...prev, { 
        role: 'assistant', 
        content: 'I generated this React Native component:',
        code: result.component
      }]);
      
      // Pass generated code and prompt to parent
      onGenerate(result.component, prompt);
      
      // Clear prompt for next message
      setPrompt('');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate component');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className={cn(
      "rounded-lg border border-input p-4 bg-background flex flex-col h-[700px]", 
      className
    )}>
      <h3 className="text-sm font-medium mb-3">AI React Native Generator</h3>
      
      {/* Chat History - Now with fixed height and scrollable */}
      <div className="flex-grow overflow-hidden mb-4">
        <div className="h-[520px] overflow-y-auto p-2 border border-input rounded-md"> 
          {chatHistory.length > 0 ? (
            <div className="space-y-4">
              {chatHistory.map((message, idx) => (
                <div 
                  key={idx} 
                  className={cn(
                    "p-3 rounded-lg", 
                    message.role === 'user' 
                      ? "bg-blue-100 ml-4" 
                      : "bg-gray-100 mr-4"
                  )}
                >
                  <p className="text-sm">{message.content}</p>
                  {message.code && (
                    <div className="mt-2 p-2 bg-gray-800 text-white rounded text-xs font-mono overflow-x-auto max-h-[300px] overflow-y-auto">
                      <pre className="text-xs">{message.code}</pre>
                    </div>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <div className="h-full flex items-center justify-center text-muted-foreground">
              <p>Your component generation history will appear here</p>
            </div>
          )}
        </div>
      </div>
      
      {/* Error message */}
      {error && (
        <div className="p-3 bg-red-100 text-red-800 rounded-md mb-4 text-sm">
          {error}
        </div>
      )}
      
      {/* Input Area - Now at the bottom with fixed height */}
      <div className="mt-auto">
        <textarea
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          className="w-full h-[100px] resize-none rounded-md border border-input px-3 py-2" 
          placeholder="E.g., Create a React Native card component with an image, title, and description"
        />
        
        <div className="flex justify-end mt-2">
          <button
            onClick={handleGenerate}
            disabled={isGenerating || !prompt.trim()}
            className={cn(
              "inline-flex items-center gap-1 px-4 py-2 rounded-md font-medium text-white",
              isGenerating
                ? "bg-primary/70 cursor-not-allowed"
                : "bg-primary hover:bg-primary/90"
            )}
          >
            {isGenerating ? 'Generating...' : 'Generate Component'}
          </button>
        </div>
      </div>
    </div>
  );
}

export default AIReactNativeGenerator;
</file>

<file path="src/components/ExpoSnackPreview.tsx">
import React, { useEffect, useRef, useState } from 'react';

interface ExpoSnackPreviewProps {
  code: string;
  dependencies?: string;
  platform?: 'web' | 'ios' | 'android' | 'mydevice';
  className?: string;
}

function ExpoSnackPreview({ 
  code, 
  dependencies = 'expo-constants,react-native-paper@4', 
  platform = 'web',
  className
}: ExpoSnackPreviewProps) {
  const iframeRef = useRef<HTMLIFrameElement>(null);
  const [snackId] = useState(() => `snack-${Math.random().toString(36).substring(2, 11)}`);
  const [snackReady, setSnackReady] = useState(false);

  // This will handle loading the SDK script only once
  useEffect(() => {
    // Check if the script already exists
    if (!document.getElementById('snack-sdk-script')) {
      const script = document.createElement('script');
      script.id = 'snack-sdk-script';
      script.src = 'https://snack.expo.dev/embed.js';
      script.async = true;
      script.onload = () => {
        console.log('Expo Snack SDK loaded');
        setSnackReady(true);
      };
      document.body.appendChild(script);
    } else {
      setSnackReady(true);
    }

    // Cleanup function
    return () => {
      // We don't remove the script as other instances may need it
    };
  }, []);

  // Message handler for Snack communication
  useEffect(() => {
    const handleMessage = (event: MessageEvent) => {
      // Only process messages from Snack
      if (event.origin !== 'https://snack.expo.dev') return;
      
      // Log Snack events for debugging
      if (event.data && event.data.type === 'snack') {
        console.log('Snack event:', event.data);
        
        // If Snack signals it's ready
        if (event.data.status === 'ready') {
          setSnackReady(true);
        }
      }
    };

    window.addEventListener('message', handleMessage);
    return () => {
      window.removeEventListener('message', handleMessage);
    };
  }, []);

  // Update the Snack when code, dependencies, or platform changes
  useEffect(() => {
    if (!snackReady || !iframeRef.current) return;
    
    try {
      // Convert dependencies string to object format expected by Snack
      const depsObject = dependencies.split(',').reduce((acc, dep) => {
        const [name, version = 'latest'] = dep.trim().split('@');
        if (name) {
          // Ensure proper versioning for known problematic packages
          if (name === 'expo-linear-gradient') {
            acc[name] = '~12.3.0'; // Use a specific compatible version
          } else {
            acc[name] = version;
          }
        }
        return acc;
      }, {} as Record<string, string>);

      // Create a modified version of the code that pre-imports the dependencies
      // to ensure they're properly initialized
      const appCode = `// App.js - Generated with beaUX
// Ensure all dependencies are properly imported
${code}

// Make sure the component is exported at the end
export default ${getComponentName(code) || 'App'};`;

      // Send message to Snack iframe
      const message = {
        type: 'snackager',
        action: 'updateSnack',
        name: 'beaUX Component',
        description: 'Created with beaUX',
        dependencies: depsObject,
        platform,
        sdkVersion: '48.0.0', // Specify a stable SDK version
        files: {
          'App.js': {
            type: 'CODE',
            contents: appCode
          }
        },
        // Force update to ensure dependencies are re-evaluated
        forceUpdate: true
      };

      console.log('Updating Snack with:', { 
        code: code.substring(0, 50) + '...', 
        platform, 
        dependencies: JSON.stringify(depsObject)
      });
      
      iframeRef.current.contentWindow?.postMessage(message, 'https://snack.expo.dev');
    } catch (error) {
      console.error('Error updating Snack:', error);
    }
  }, [code, dependencies, platform, snackReady]);

  // Function to extract component name from code
  const getComponentName = (code: string): string | null => {
    const functionMatch = code.match(/function\s+([A-Za-z0-9_]+)\s*\(/);
    if (functionMatch && functionMatch[1]) {
      return functionMatch[1];
    }
    const constMatch = code.match(/const\s+([A-Za-z0-9_]+)\s*=\s*\(\)/);
    if (constMatch && constMatch[1]) {
      return constMatch[1];
    }
    return null;
  };

  return (
    <div className={`w-full h-full rounded-md overflow-hidden bg-white ${className || ''}`}>
      {!snackReady && (
        <div className="w-full h-full flex items-center justify-center bg-gray-50">
          <p className="text-muted-foreground animate-pulse">Loading Expo Snack...</p>
        </div>
      )}
      <iframe
        ref={iframeRef}
        title="Expo Snack Preview"
        src={`https://snack.expo.dev/embedded?name=beaUX%20Component&iframeId=${snackId}&preview=true&platform=${platform}&supportedPlatforms=${platform}&theme=light&sdkVersion=48.0.0&dependencies=${encodeURIComponent(dependencies)}`}
        style={{
          width: '100%',
          height: '100%',
          border: 0,
          overflow: 'hidden',
          background: '#fafafa',
        }}
        allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
        sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
      />
    </div>
  );
}

export default ExpoSnackPreview;
</file>

<file path="src/App.tsx">
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Home from "./pages/Home";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Home />} />
          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </BrowserRouter>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;
</file>

<file path="src/utils/transformCode.ts">
// Simplified transformCode function - no imports needed
export const transformCode = (code: string): { Component: any | null; error: string | null } => {
  try {
    // Check if the code is empty
    if (!code.trim()) {
      return { 
        Component: null, 
        error: null 
      };
    }

    // Extract the component name from the code
    const componentNameMatch = code.match(/function\s+([^({\s]+)/);
    const componentName = componentNameMatch ? componentNameMatch[1] : 'MyComponent';
    
    // Get React from the global scope
    const ReactLib = (window as any).React;
    
    if (!ReactLib) {
      return {
        Component: null,
        error: "React not found in global scope. Make sure React is globally available."
      };
    }
    
    try {
      // Create a blob URL for the iframe with HTML that includes React, ReactDOM, and Babel
      const fullHtml = `
        <!DOCTYPE html>
        <html>
        <head>
          <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
          <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
          <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
          <style>
            body { 
              margin: 0; 
              padding: 0; 
              font-family: sans-serif;
              display: flex;
              justify-content: center;
              align-items: center;
              height: 100vh;
            }
            #root {
              width: 100%;
            }
          </style>
        </head>
        <body>
          <div id="root"></div>
          <script type="text/babel">
            ${code}
            
            // Render the component to the root element
            const rootElement = document.getElementById('root');
            const root = ReactDOM.createRoot(rootElement);
            root.render(React.createElement(${componentName}));
          </script>
        </body>
        </html>
      `;
      
      const blob = new Blob([fullHtml], { type: 'text/html' });
      const blobUrl = URL.createObjectURL(blob);
      
      // Create a simple iframe component that loads the blob URL
      const Component = () => {
        // Clean up the blob URL when the component unmounts
        ReactLib.useEffect(() => {
          return () => {
            URL.revokeObjectURL(blobUrl);
          };
        }, []);
        
        return ReactLib.createElement('iframe', {
          src: blobUrl,
          style: {
            width: '100%',
            height: '100%',
            border: 'none',
            borderRadius: '8px',
            backgroundColor: 'white',
          },
          title: 'Component Preview',
        });
      };
      
      return { Component, error: null };
    } catch (err) {
      console.error("Component evaluation error:", err);
      return {
        Component: null,
        error: err instanceof Error ? err.message : "Error evaluating component"
      };
    }
  } catch (error) {
    console.error("Error transforming code:", error);
    return { 
      Component: null, 
      error: error instanceof Error ? error.message : "Unknown error processing code" 
    };
  }
};

// Extend Window interface to add our temporary properties
declare global {
  interface Window {
    _tempComponent?: any;
    _tempComponentError?: string;
  }
}
</file>

<file path="src/index.css">
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 5.9% 10%;
    --radius: 12px;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }

  * {
    @apply border-border;
    font-family: 'Inter', sans-serif;
  }

  body {
    @apply bg-background text-foreground;
    overflow-x: hidden;
  }

  /* Custom animations */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideUp {
    from { transform: translateY(20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }

  @keyframes slideInRight {
    from { transform: translateX(20px); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }

  .animate-fade-in {
    animation: fadeIn 0.6s ease-out forwards;
  }

  .animate-slide-up {
    animation: slideUp 0.5s ease-out forwards;
  }

  .animate-slide-in-right {
    animation: slideInRight 0.5s ease-out forwards;
  }
  
  /* Code editor styling */
  .code-editor {
    @apply font-mono text-sm leading-relaxed;
    tab-size: 2;
  }
  
  /* Glassmorphism effects */
  .glass {
    @apply bg-white/70 backdrop-blur-lg border border-white/20;
  }
  
  .dark .glass {
    @apply bg-black/40 backdrop-blur-lg border border-white/10;
  }

  /* CSS grid pattern class */
  .bg-grid-pattern {
    background-size: 40px 40px;
    background-image: 
      linear-gradient(to right, rgba(255, 255, 255, 0.05) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
  }

  .masonry-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    grid-auto-rows: minmax(100px, auto);
    grid-gap: 1rem;
  }

  .preview-container img {
    max-width: 100%;
    height: auto;
  }

  /* Unsplash-inspired animations */
  .animate-fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }

  .animate-slide-up {
    animation: slideUp 0.5s ease-out;
  }

  .animate-slide-in-right {
    animation: slideInRight 0.5s ease-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideUp {
    from { transform: translateY(20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }

  @keyframes slideInRight {
    from { transform: translateX(20px); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }

  /* Galaxy Theme for Diagram Editor */
  .galaxy-node {
    box-shadow: 0 0 15px rgba(45, 212, 191, 0.2);
    transition: all 0.3s ease;
  }

  .galaxy-node:hover {
    box-shadow: 0 0 20px rgba(45, 212, 191, 0.3);
  }

  .shadow-glow {
    box-shadow: 0 0 20px rgba(192, 132, 252, 0.4), 0 0 30px rgba(139, 92, 246, 0.2);
  }

  .shadow-glow-teal {
    box-shadow: 0 0 20px rgba(45, 212, 191, 0.4), 0 0 30px rgba(20, 184, 166, 0.2);
  }

  .shadow-space {
    box-shadow: 0 0 15px rgba(30, 30, 40, 0.2);
  }

  .glow-connection {
    filter: drop-shadow(0 0 3px rgba(167, 139, 250, 0.5));
  }

  .glow-connection-teal {
    filter: drop-shadow(0 0 3px rgba(45, 212, 191, 0.5));
  }

  .space-text {
    text-shadow: 0 0 4px rgba(45, 212, 191, 0.7);
  }

  /* Stars background */
  .stars-small, .stars-medium, .stars-large {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  .stars-small {
    background-image: 
      radial-gradient(1px 1px at 10% 20%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 20% 50%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 30% 70%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 40% 10%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 50% 30%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 60% 60%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 70% 90%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 80% 40%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 90% 80%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 95% 15%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 5% 85%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 15% 35%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 25% 65%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 35% 95%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 45% 25%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 55% 55%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 65% 75%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 75% 5%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 85% 45%, rgba(255, 255, 255, 0.95), transparent),
      radial-gradient(1px 1px at 95% 85%, rgba(255, 255, 255, 0.95), transparent);
    background-size: 100% 100%;
    background-repeat: no-repeat;
    opacity: 0.7;
  }

  .stars-medium {
    background-image: 
      radial-gradient(1.5px 1.5px at 15% 15%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(1.5px 1.5px at 30% 45%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(1.5px 1.5px at 45% 75%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(1.5px 1.5px at 60% 25%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(1.5px 1.5px at 75% 55%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(1.5px 1.5px at 90% 85%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(1.5px 1.5px at 20% 90%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(1.5px 1.5px at 35% 20%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(1.5px 1.5px at 50% 50%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(1.5px 1.5px at 65% 80%, rgba(255, 255, 255, 1), transparent);
    background-size: 100% 100%;
    background-repeat: no-repeat;
    opacity: 0.5;
  }

  .stars-large {
    background-image: 
      radial-gradient(2px 2px at 25% 25%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(2px 2px at 50% 75%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(2px 2px at 75% 25%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(2px 2px at 10% 60%, rgba(255, 255, 255, 1), transparent),
      radial-gradient(2px 2px at 80% 65%, rgba(255, 255, 255, 1), transparent);
    background-size: 100% 100%;
    background-repeat: no-repeat;
    opacity: 0.45;
  }
}
</file>

<file path="README.md">
# beaUX - The Beautiful Developer Experience

![beaUX](https://img.shields.io/badge/status-beta-purple)

## **✨ Overview**
beaUX is a powerful development environment that combines React and React Native development tools in a beautiful, intuitive interface. It features:

1. **Visual Architecture Designer** – Visualize and plan your component architecture with an interactive canvas board, with all your designs saved to local storage.
2. **AI-Powered React Native Sandbox** – Create, preview, and generate React Native components with AI assistance and Expo Snack integration.
3. **React Web Sandbox** – Build React web components with real-time preview and AI-powered component generation.

## **🎨 Key Features**

### **Visual Architecture Designer**
- Interactive canvas to visualize component relationships and brain mapping tool
- Drag and drop interface for creating component diagrams and re-arranging notes, etc. 
- Local storage persistence for saving your designs
- Add notes and annotations to your component architecture

### **AI-Powered React Native Sandbox**
- Integrated AI assistant for generating React Native components
- Live preview with Expo Snack
- Automatic dependency detection and management
- Multi-platform preview (web, iOS, Android)

### **React Web Sandbox**
- Real-time React component preview
- AI-assisted component generation
- Integrated code editor with syntax highlighting
- Component library with reusable elements

## **🚀 Getting Started**

### **Installation**
```bash
# Clone the repository
git clone https://github.com/a-bonus/beaUX.git
cd beaUX

# Install dependencies
npm install

# Start the development server
npm run dev
```

### **Usage**
1. Access the Visual Architecture Designer to plan your component structure
2. Use the AI-Powered React Native Sandbox to create mobile components
3. Switch to the React Web Sandbox for web component development
4. All your work is automatically saved to local storage

## **🛠️ Technology Stack**
- Built with Vite + React TypeScript
- TailwindCSS for styling
- Babel for JSX transpilation
- OpenRouter API for AI assistance
- Expo Snack for React Native previews

## **🔮 Coming Soon**
- Component export functionality
- Full project scaffolding
- Additional AI models
- Theme customization
- Collaborative editing

## **👨‍💻 Connect with the Creator**
- [LinkedIn](https://linkedin.com/in/alainbonus)
- [GitHub](https://github.com/a-bonus)

## **💖 Made with heart for the vibe coders**
This project is built with love for developers who appreciate beautiful tools and smooth experiences.
</file>

<file path="src/components/Header.tsx">
import React, { useState, useEffect } from 'react';
import { cn } from '@/lib/utils';
import { Link } from 'react-router-dom';
import { Menu, X } from 'lucide-react';

interface HeaderProps {
  className?: string;
}

const Header: React.FC<HeaderProps> = ({ className }) => {
  // Rotating text animation
  const rotatingWords = ["supercharges", "organizes", "empowers", "visualizes"];
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [isAnimating, setIsAnimating] = useState(true);
  const [activeSection, setActiveSection] = useState('visual-architect');
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  
  useEffect(() => {
    const interval = setInterval(() => {
      setIsAnimating(false);
      setTimeout(() => {
        setCurrentWordIndex((prevIndex) => (prevIndex + 1) % rotatingWords.length);
        setIsAnimating(true);
      }, 500); // Wait for fade out before changing word
    }, 3000); // Change word every 3 seconds
    
    return () => clearInterval(interval);
  }, []);
  
  // Handle scroll to section
  const scrollToSection = (sectionId: string) => {
    setActiveSection(sectionId);
    setIsMenuOpen(false); // Close menu after selection
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
    }
  };
  
  return (
    <header className={cn(
      "w-full py-4 px-6 flex items-center justify-between border-b border-border/60",
      "backdrop-blur-sm bg-background/70 supports-[backdrop-filter]:bg-background/60",
      "transition-all duration-200 ease-in-out z-50 sticky top-0",
      className
    )}>
      <div className="flex items-center">
        {/* beaUX Logo - Elegant and Minimalist */}
        <Link to="/" className="flex items-center group">
          <h1 className="text-3xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-primary via-cyan-400 to-purple-500 hover:from-purple-500 hover:via-cyan-400 hover:to-primary transition-all duration-700">
            beaUX
          </h1>
          <div className="absolute -bottom-1 w-0 h-0.5 bg-gradient-to-r from-primary to-purple-500 group-hover:w-full transition-all duration-700"></div>
        </Link>
        
        {/* Rotating text animation - Minimalist */}
        <div className="flex items-center ml-4">
          <div className="relative h-6 overflow-hidden">
            <span 
              className={cn(
                "absolute transition-all duration-500 transform min-w-24 text-center text-sm",
                isAnimating 
                  ? "opacity-100 translate-y-0" 
                  : "opacity-0 -translate-y-6"
              )}
              style={{ color: '#00E5C7' }}
            >
              {rotatingWords[currentWordIndex]}
            </span>
          </div>
        </div>
      </div>
      
      <div className="flex items-center gap-4">
        <div className="text-sm text-muted-foreground">
          <span className="px-2 py-1 rounded-full bg-secondary text-xs font-medium">
            Beta
          </span>
        </div>
        
        {/* Menu Button */}
        <button 
          onClick={() => setIsMenuOpen(!isMenuOpen)}
          className="p-2 rounded-md hover:bg-muted transition-colors"
          aria-label="Toggle menu"
        >
          {isMenuOpen ? <X size={20} /> : <Menu size={20} />}
        </button>
      </div>
      
      {/* Dropdown Menu */}
      {isMenuOpen && (
        <div className="absolute top-full right-0 mt-1 w-48 bg-background rounded-md shadow-lg border border-border/60 overflow-hidden z-50">
          <div className="py-1">
            <button 
              onClick={() => scrollToSection('visual-architect')}
              className={cn(
                "w-full text-left px-4 py-2 text-sm transition-colors",
                activeSection === 'visual-architect' 
                  ? "bg-purple-500/5 text-purple-400 font-medium" 
                  : "hover:bg-muted text-muted-foreground hover:text-foreground"
              )}
            >
              The Visual Architect
            </button>
          </div>
        </div>
      )}
    </header>
  );
};

export default Header;
</file>

<file path="src/utils/openRouterApi.ts">
/**
 * Utility for making API calls to OpenRouter
 * https://openrouter.ai/docs/quickstart
 */

// Define the response type
interface OpenRouterResponse {
  choices: {
    message: {
      content: string;
    };
    index: number;
  }[];
  id: string;
  model: string;
  object: string;
}

interface GenerateComponentResponse {
  component: string;
  error: string | null;
}

/**
 * Generate a React component using OpenRouter AI
 * 
 * @param prompt The description of the component to generate
 * @param apiKey The OpenRouter API key
 * @returns The generated React component code
 */
export async function generateComponent(prompt: string, apiKey: string): Promise<GenerateComponentResponse> {
  if (!prompt.trim()) {
    throw new Error('Prompt cannot be empty');
  }

  if (!apiKey) {
    throw new Error('OpenRouter API key is not configured');
  }

  const systemPrompt = `You are an expert React developer. Generate clean, functional React components based on user descriptions.

CRITICAL RENDERING REQUIREMENTS:
- DO NOT include imports in your response 
- Use ONLY the named function syntax: function ComponentName() {} (NOT arrow functions or const declarations)
- Component name MUST be in PascalCase and descriptive (e.g., TestComponent, UserProfile)
- DO NOT use export statements - the component will be rendered directly
- Add Component.displayName = 'ComponentName' for better debugging
- DO NOT begin with imports - React, useState, and useEffect are automatically available
- The component MUST be defined with the exact pattern 'function ComponentName() {' for the renderer to detect it
- Return ONLY valid code without explanations or markdown formatting
- The previewer creates a sandboxed iframe with React available as a global variable, but you need to access hooks through the React object itself.

HOW THE BEAUX PREVIEWER WORKS:
- It looks for a function component using the regex pattern /function\\s+([^({\\s]+)/ to extract the component name
- It creates a sandboxed iframe with React, ReactDOM, and Babel pre-loaded
- It injects your component code into this iframe and renders it
- Your component must be completely self-contained
- The beaUX previewer creates a sandboxed environment with React, ReactDOM, and Babel pre-loaded - you don't need to import them
- React hooks (useState, useEffect, etc.) are available without imports

COMPONENT STRUCTURE:
- Use PascalCase for component names (e.g., UserProfile not userProfile)
- Define props with clear destructuring at the top of the component
- Include PropTypes for type checking when appropriate
- Group related state hooks together
- Place useEffect hooks after state declarations
- Handle loading/error states where appropriate

STYLING APPROACH:
- Use inline styling via the style={{}} attribute for simplicity
- Group related styles in objects for readability
- Follow responsive design principles

CODE QUALITY:
- Include concise, helpful comments for complex logic
- Implement proper event handling with appropriate naming (handleClick, etc.)
- Ensure accessibility with proper aria attributes and semantic HTML
- Extract complex logic to separate named functions within the component

EXAMPLE #1 - Simple Component: (DO NOT INCLUDE IMPORTS)
function TestComponent() {
  return (
    <div style={{ textAlign: 'center', marginTop: '50px' }}>
      <h1>Hello World</h1>
    </div>
  );
}

TestComponent.displayName = 'TestComponent'; (DO NOT INCLUDE IMPORTS)

EXAMPLE #2 - Interactive Component:
function UIComponent() {
  const [isActive, setIsActive] = useState(false);
  
  const buttonStyle = {
    backgroundColor: isActive ? '#4CAF50' : '#2196F3',
    color: 'white',
    padding: '10px 20px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    transition: 'background-color 0.3s'
  };

  const starIcon = (
    <svg viewBox="0 0 576 512" style={{ width: '20px', height: '20px', fill: 'currentColor', marginRight: '8px' }}>
      <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"/>
    </svg>
  );

  return (
    <div style={{ padding: '20px' }}>
      <button 
        style={buttonStyle}
        onClick={() => setIsActive(!isActive)}
        aria-pressed={isActive}
      >
        {starIcon}
        {isActive ? 'Active' : 'Inactive'}
      </button>
    </div>
  );
}

UIComponent.displayName = 'UIComponent';`;

  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'HTTP-Referer': window.location.origin,
        'X-Title': 'beaUX'
      },
      body: JSON.stringify({
        model: 'openai/gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: prompt }
        ]
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return {
      component: data.choices[0].message.content,
      error: null
    };
  } catch (error) {
    console.error('Error generating component:', error);
    return {
      component: '',
      error: error instanceof Error ? error.message : 'An unknown error occurred'
    };
  }
}

/**
 * Generate a React Native component using OpenRouter AI
 * 
 * @param prompt The description of the component to generate
 * @param apiKey The OpenRouter API key
 * @param chatHistory Previous conversation history (optional)
 * @returns The generated React Native component code
 */
export async function generateReactNativeComponent(
  prompt: string, 
  apiKey: string,
  chatHistory: {role: string, content: string, code?: string}[] = []
): Promise<GenerateComponentResponse> {
  if (!prompt.trim()) {
    throw new Error('Prompt cannot be empty');
  }

  if (!apiKey) {
    throw new Error('OpenRouter API key is not configured');
  }

  const systemPrompt = `You are an expert React Native developer. Generate clean, functional React Native components based on user descriptions.

CRITICAL RENDERING REQUIREMENTS:
- Your code will be executed in Expo Snack environment
- You MUST include necessary imports: import React from 'react'; import { View, Text, ... } from 'react-native';
- Use a named function for your component: function ComponentName() {}
- Component name MUST be in PascalCase and descriptive (e.g., ProfileCard, LoginScreen)
- Export the component at the end: export default ComponentName;
- Return ONLY valid code without explanations or markdown formatting

HOW THE EXPO SNACK PREVIEW WORKS:
- It renders your React Native component in a sandboxed environment
- Your component must be completely self-contained
- Common libraries like react-native-paper can be used by adding them as dependencies

COMPONENT STRUCTURE:
- Use PascalCase for component names
- Define props with clear destructuring at the top of the component
- Group related state hooks together
- Place useEffect hooks after state declarations
- Handle loading/error states where appropriate

STYLING APPROACH:
- Use StyleSheet.create() for styles at the bottom of the file
- Group related styles in the stylesheet
- Follow responsive design principles using dimensions and flexbox

CODE QUALITY:
- Include concise, helpful comments for complex logic
- Implement proper event handling with appropriate naming (handlePress, etc.)
- Ensure accessibility with proper accessibilityLabel attributes
- Extract complex logic to separate named functions within the component

EXAMPLE:
import React, { useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';

function CounterButton() {
  const [count, setCount] = useState(0);
  
  const handlePress = () => {
    setCount(count + 1);
  };
  
  return (
    <View style={styles.container}>
      <Text style={styles.count}>{count}</Text>
      <TouchableOpacity 
        style={styles.button} 
        onPress={handlePress}
        accessibilityLabel="Increment counter"
      >
        <Text style={styles.buttonText}>Increment</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    padding: 20,
  },
  count: {
    fontSize: 48,
    marginBottom: 20,
  },
  button: {
    backgroundColor: '#2196F3',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 5,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
  },
});

export default CounterButton;`;

  try {
    // Format chat history for API call
    const messages = [
      { role: 'system', content: systemPrompt },
    ];
    
    // Add chat history if provided
    if (chatHistory.length > 0) {
      // Only include the content field from chat history
      chatHistory.forEach(msg => {
        messages.push({
          role: msg.role,
          content: msg.content + (msg.code ? `\n\n${msg.code}` : '')
        });
      });
    }
    
    // Add current prompt
    messages.push({ role: 'user', content: prompt });

    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'HTTP-Referer': window.location.origin,
        'X-Title': 'beaUX'
      },
      body: JSON.stringify({
        model: 'openai/gpt-3.5-turbo',
        messages: messages
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return {
      component: data.choices[0].message.content,
      error: null
    };
  } catch (error) {
    console.error('Error generating React Native component:', error);
    return {
      component: '',
      error: error instanceof Error ? error.message : 'An unknown error occurred'
    };
  }
}
</file>

<file path="src/components/DiagramEditor.tsx">
import React, { useState, useRef, useEffect } from 'react';
import { 
  X,
  Plus,
  ChevronRight,
  ChevronLeft,
  Trash,
  Save,
  Undo2,
  Redo2,
  ZoomIn,
  ZoomOut,
  FileCog,
  FileJson,
  Download,
  Hand,
  Move, // Add Move icon import
  Code,
  MousePointer,
  PanelLeftClose,
  PanelLeft,
  Maximize,
  Minimize,
  List,
  Image,
  ArrowRight,
  Link,
  Check,
  ArrowDown
} from 'lucide-react';
import html2canvas from 'html2canvas';

interface ComponentNode {
  id: string;
  name: string;
  position: { x: number; y: number };
  color: string;
  type: 'component' | 'page' | 'hook' | 'util' | 'notes';
  code: string;
  notes: string;
  isCodeCollapsed?: boolean;
}

interface Connection {
  id: string;
  sourceId: string;
  targetId: string;
  label: string;
}

const colors = {
  component: '#3b82f6', // blue
  page: '#10b981',      // green
  hook: '#8b5cf6',      // purple
  util: '#f59e0b',      // amber
  notes: '#ec4899'      // pink
};

const DiagramEditor: React.FC = () => {
  // State for nodes and connections
  const [nodes, setNodes] = useState<ComponentNode[]>([]);
  const [connections, setConnections] = useState<Connection[]>([]);
  
  // State for editor interaction
  const [selectedNode, setSelectedNode] = useState<string | null>(null);
  const [selectedConnection, setSelectedConnection] = useState<string | null>(null);
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());
  const [cardHeights, setCardHeights] = useState<Record<string, number>>({});
  const [newNodeName, setNewNodeName] = useState('');
  const [newNodeType, setNewNodeType] = useState<ComponentNode['type']>('component');
  const [connectionStart, setConnectionStart] = useState<string | null>(null);
  const [isCreatingConnection, setIsCreatingConnection] = useState(false);
  const [isDraggingNode, setIsDraggingNode] = useState(false);
  const [movableNode, setMovableNode] = useState<string | null>(null);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [viewportPosition, setViewportPosition] = useState({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);
  const [canvasOffset, setCanvasOffset] = useState({ x: 0, y: 0 });
  const [isPanMode, setIsPanMode] = useState(false);
  
  // State for undo/redo
  const [history, setHistory] = useState<{nodes: ComponentNode[], connections: Connection[]}[]>([]);
  const [historyIndex, setHistoryIndex] = useState(-1);
  
  // State for feedback toast
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackMessage, setFeedbackMessage] = useState('');
  
  // State for save/load modals
  const [isSaveModalOpen, setIsSaveModalOpen] = useState(false);
  const [isLoadModalOpen, setIsLoadModalOpen] = useState(false);
  const [isImportModalOpen, setIsImportModalOpen] = useState(false);
  const [importJsonText, setImportJsonText] = useState('');
  const [importError, setImportError] = useState<string | null>(null);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [currentDiagramName, setCurrentDiagramName] = useState('My Diagram');
  const [savedDiagrams, setSavedDiagrams] = useState<{id: string, name: string, timestamp: number}[]>([]);
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isPastDiagramsOpen, setIsPastDiagramsOpen] = useState(false);
  
  // State for sidebar collapse and resizing
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [sidebarWidth, setSidebarWidth] = useState(240); // Fixed width now
  
  // State for improved sidebar organization
  const [searchTerm, setSearchTerm] = useState('');
  const [favorites, setFavorites] = useState<Set<string>>(new Set());
  const [showOnlyFavorites, setShowOnlyFavorites] = useState(false);
  const [expandedGroups, setExpandedGroups] = useState<Set<string>>(
    new Set(['component', 'page', 'hook', 'util', 'notes'])
  );
  
  // Refs for interaction
  const editorRef = useRef<HTMLDivElement>(null);
  const isDragging = useRef(false);
  const dragOffset = useRef({ x: 0, y: 0 });
  const isDraggingCanvas = useRef(false);
  const lastMousePosition = useRef({ x: 0, y: 0 });
  const diagramContainerRef = useRef<HTMLDivElement>(null);
  const titleInputRef = useRef<HTMLInputElement>(null);
  const canvasContainerRef = useRef<HTMLDivElement>(null);
  
  // Refs for each card to measure height
  const cardRefs = useRef<Record<string, HTMLDivElement | null>>({});

  // Helper function to save to history for undo/redo
  const saveToHistory = (nodeState: ComponentNode[], connectionState: Connection[]) => {
    const newState = {
      nodes: [...nodeState],
      connections: [...connectionState]
    };
    
    // If we're not at the end of the history, trim it
    const newHistory = history.slice(0, historyIndex + 1);
    newHistory.push(newState);
    
    // Cap history at 20 entries
    if (newHistory.length > 20) {
      newHistory.shift();
    }
    
    setHistory(newHistory);
    setHistoryIndex(newHistory.length - 1);
  };

  // Helper function for feedback toasts
  const showFeedbackToast = (message: string) => {
    setFeedbackMessage(message);
    setShowFeedback(true);
    setTimeout(() => setShowFeedback(false), 3000);
  };

  // Helper function to calculate intersection points of line with rectangle
  const calculateCardIntersection = (cardCenter: {x: number, y: number}, otherPoint: {x: number, y: number}) => {
    // Card dimensions
    const cardWidth = 200;
    const cardHeight = 80;
    
    // Calculate half dimensions
    const halfWidth = cardWidth / 2;
    const halfHeight = cardHeight / 2;
    
    // Calculate angle of line
    const dx = otherPoint.x - cardCenter.x;
    const dy = otherPoint.y - cardCenter.y;
    const angle = Math.atan2(dy, dx);
    
    // Calculate intersection distances based on angle
    let xIntersect, yIntersect;
    
    // Calculate the intersection with either vertical or horizontal edge
    if (Math.abs(Math.cos(angle)) * halfHeight > Math.abs(Math.sin(angle)) * halfWidth) {
      // Intersects with left or right edge
      xIntersect = Math.sign(Math.cos(angle)) * halfWidth;
      yIntersect = Math.tan(angle) * xIntersect;
    } else {
      // Intersects with top or bottom edge
      yIntersect = Math.sign(Math.sin(angle)) * halfHeight;
      xIntersect = yIntersect / Math.tan(angle);
    }
    
    // Return intersection point
    return {
      x: cardCenter.x + xIntersect,
      y: cardCenter.y + yIntersect
    };
  };

  // Simple helper function to get node center position
  const getNodeCenter = (nodeId: string) => {
    const node = nodes.find(n => n.id === nodeId);
    if (!node) return { x: 0, y: 0 };
    
    return {
      x: node.position.x + 100, // Half of 200px width
      y: node.position.y + 40   // Half of 80px height
    };
  };

  // Delete a saved diagram
  const deleteDiagram = (diagramId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    try {
      // Remove from saved list
      const updatedDiagrams = savedDiagrams.filter(diagram => diagram.id !== diagramId);
      localStorage.setItem('beaUX-saved-diagrams', JSON.stringify(updatedDiagrams));
      
      // Remove diagram data
      localStorage.removeItem(`beaUX-diagram-${diagramId}`);
      
      setSavedDiagrams(updatedDiagrams);
      showFeedbackToast('Diagram deleted');
    } catch (err) {
      console.error('Failed to delete diagram:', err);
      showFeedbackToast('Error deleting diagram');
    }
  };

  // Export diagram to JSON
  const exportDiagramToJson = () => {
    const diagramData = {
      nodes,
      connections,
      name: currentDiagramName,
      lastSaved: new Date().toISOString()
    };
    
    try {
      // Create a JSON string
      const jsonString = JSON.stringify(diagramData, null, 2);
      
      // Create a blob and download link
      const blob = new Blob([jsonString], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      // Create and trigger download
      const a = document.createElement('a');
      a.href = url;
      a.download = `${currentDiagramName.replace(/\s+/g, '-').toLowerCase()}.json`;
      document.body.appendChild(a);
      a.click();
      
      // Clean up
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      showFeedbackToast('Diagram exported to JSON');
    } catch (err) {
      console.error('Failed to export diagram:', err);
      showFeedbackToast('Error exporting diagram');
    }
  };

  // Import diagram from JSON
  const importDiagramFromJson = () => {
    try {
      // Parse the JSON
      const parsedData = JSON.parse(importJsonText);
      
      // Validate basic structure
      if (!Array.isArray(parsedData.nodes) || !Array.isArray(parsedData.connections)) {
        throw new Error('Invalid diagram format: missing nodes or connections arrays');
      }
      
      // Optional: More detailed validation could be added here
      
      // Set the diagram data
      setNodes(parsedData.nodes);
      setConnections(parsedData.connections);
      
      // Set the diagram name if provided
      if (parsedData.name) {
        setCurrentDiagramName(parsedData.name);
      }
      
      // Save to history
      saveToHistory(parsedData.nodes, parsedData.connections);
      
      // Close modal and show feedback
      setIsImportModalOpen(false);
      setImportJsonText('');
      setImportError(null);
      showFeedbackToast('Diagram imported successfully');
    } catch (err) {
      console.error('Failed to import diagram:', err);
      setImportError(`Error importing diagram: ${err instanceof Error ? err.message : 'Invalid JSON format'}`);
    }
  };

  // Handle file upload for JSON import
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = (event) => {
      if (event.target?.result) {
        setImportJsonText(event.target.result as string);
        setImportError(null);
      }
    };
    reader.onerror = () => {
      setImportError('Error reading file');
    };
    reader.readAsText(file);
  };

  // Toggle fullscreen mode
  const toggleFullscreen = () => {
    if (!diagramContainerRef.current) return;
    
    if (!isFullscreen) {
      if (diagramContainerRef.current.requestFullscreen) {
        diagramContainerRef.current.requestFullscreen();
      }
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      }
    }
  };

  // Handle fullscreen change events
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    
    return () => {
      document.removeEventListener('fullscreenchange', handleFullscreenChange);
    };
  }, []);

  // Auto-focus the title input when editing
  useEffect(() => {
    if (isEditingTitle && titleInputRef.current) {
      titleInputRef.current.focus();
    }
  }, [isEditingTitle]);

  // Add custom CSS styles for resize cursor
  useEffect(() => {
    // Create a style element
    const styleEl = document.createElement('style');
    styleEl.textContent = `
      .cursor-nwse-resize {
        cursor: nwse-resize !important;
      }
    `;
    // Add it to the document head
    document.head.appendChild(styleEl);
    
    // Clean up on unmount
    return () => {
      document.head.removeChild(styleEl);
    };
  }, []);

  // Add helper function for auto-growing textareas
  const autoGrowTextarea = (element: HTMLTextAreaElement) => {
    // Reset height temporarily to get the correct scrollHeight
    element.style.height = 'auto';
    // Set the height to scrollHeight to expand based on content
    element.style.height = `${element.scrollHeight}px`;
  };

  // Sample data with tutorial content
  const initialSampleData: { nodes: ComponentNode[], connections: Connection[] } = {
    nodes: [
      {
        id: 'welcome',
        name: 'Welcome',
        type: 'component',
        position: { x: 100, y: 100 },
        notes: 'This is a simple tutorial to help you get started with the diagram editor.',
        color: colors.component,
        code: ''
      },
      {
        id: 'add',
        name: 'Add Components',
        type: 'component',
        position: { x: 400, y: 50 },
        notes: 'Click the + button to add new components to your diagram. You can create components, pages, hooks, and utilities.',
        color: colors.component,
        code: ''
      },
      {
        id: 'move',
        name: 'Move Components',
        type: 'component',
        position: { x: 400, y: 250 },
        notes: 'Click the move icon on a component to make it movable, then drag it around. Press ESC or click elsewhere to stop moving.',
        color: colors.component,
        code: ''
      },
      {
        id: 'connect',
        name: 'Connect',
        type: 'component',
        position: { x: 700, y: 150 },
        notes: 'Click the arrow icon on a component to create connections between components. Show how they relate to each other.',
        color: colors.component,
        code: ''
      }
    ],
    connections: [
      {
        id: 'c-welcome-add-1',
        sourceId: 'welcome',
        targetId: 'add',
        label: ""
      },
      {
        id: 'c-welcome-move-1',
        sourceId: 'welcome',
        targetId: 'move',
        label: ""
      },
      {
        id: 'c-add-connect-1',
        sourceId: 'add',
        targetId: 'connect',
        label: ""
      },
      {
        id: 'c-move-connect-1',
        sourceId: 'move',
        targetId: 'connect',
        label: ""
      }
    ]
  };

  useEffect(() => {
    // Load the saved diagrams list from localStorage
    const savedDiagramsList = localStorage.getItem('beaUX-saved-diagrams');
    if (savedDiagramsList) {
      setSavedDiagrams(JSON.parse(savedDiagramsList));
    }
    
    // Load the last edited diagram if it exists
    const lastDiagram = localStorage.getItem('beaUX-current-diagram');
    if (lastDiagram) {
      try {
        const parsed = JSON.parse(lastDiagram);
        setNodes(parsed.nodes);
        setConnections(parsed.connections);
        setCurrentDiagramName(parsed.name || 'Untitled Diagram');
        saveToHistory(parsed.nodes, parsed.connections);
        showFeedbackToast('Previous diagram loaded');
      } catch (err) {
        console.error('Failed to load saved diagram:', err);
        // Fall back to tutorial diagram on error
        setNodes(initialSampleData.nodes);
        setConnections(initialSampleData.connections);
        setCurrentDiagramName('Tutorial Diagram');
        saveToHistory(initialSampleData.nodes, initialSampleData.connections);
      }
    } else {
      // Use initial tutorial data if no saved diagram
      setNodes(initialSampleData.nodes);
      setConnections(initialSampleData.connections);
      setCurrentDiagramName('Tutorial Diagram');
      saveToHistory(initialSampleData.nodes, initialSampleData.connections);
    }
  }, []);

  // Export diagram as PNG
  const exportDiagramAsPng = () => {
    if (!canvasContainerRef.current) return;
    
    try {
      html2canvas(canvasContainerRef.current, {
        backgroundColor: '#000005',
        scale: 2, // Higher quality
        logging: false,
        useCORS: true,
        allowTaint: true
      }).then(canvas => {
        // Convert to PNG and trigger download
        const pngUrl = canvas.toDataURL('image/png');
        const a = document.createElement('a');
        a.href = pngUrl;
        a.download = `${currentDiagramName.replace(/\s+/g, '-').toLowerCase()}.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        showFeedbackToast('Diagram exported as PNG');
      }).catch(err => {
        console.error('Failed to export PNG:', err);
        showFeedbackToast('Error exporting diagram');
      });
    } catch (err) {
      console.error('Failed to capture canvas:', err);
      showFeedbackToast('Error exporting diagram');
    }
  };

  const handleMouseMove = (e: React.MouseEvent) => {
    if (canvasContainerRef.current) {
      const rect = canvasContainerRef.current.getBoundingClientRect();
      
      // Update mouse position for connection previews
      const rawX = (e.clientX - rect.left - canvasOffset.x) / zoom;
      const rawY = (e.clientY - rect.top - canvasOffset.y) / zoom;
      
      setMousePosition({ x: rawX, y: rawY });
      
      // Handle canvas dragging
      if (isDraggingCanvas.current && canvasContainerRef.current) {
        const deltaX = e.clientX - lastMousePosition.current.x;
        const deltaY = e.clientY - lastMousePosition.current.y;
        
        setCanvasOffset(prev => ({
          x: prev.x + deltaX,
          y: prev.y + deltaY
        }));
        
        lastMousePosition.current = { x: e.clientX, y: e.clientY };
      }
      
      // Handle node dragging with sticky selection
      if (isDraggingNode && movableNode && canvasContainerRef.current) {
        e.preventDefault(); // Prevent text selection during drag
        
        const rect = canvasContainerRef.current.getBoundingClientRect();
        
        // Calculate new position based on mouse movement
        const mouseX = e.clientX - rect.left - canvasOffset.x;
        const mouseY = e.clientY - rect.top - canvasOffset.y; 
        
        // Get the node's dimensions
        const selectedNodeObj = nodes.find(n => n.id === movableNode);
        if (selectedNodeObj) {
          const newX = mouseX / zoom - 100; // Half the node width
          const newY = mouseY / zoom - 40;  // Half the node height
          
          // Use requestAnimationFrame for smoother updates
          window.requestAnimationFrame(() => {
            // Update only the currently movable node
            setNodes(prevNodes => 
              prevNodes.map(node => 
                node.id === movableNode 
                  ? { ...node, position: { x: newX, y: newY } } 
                  : node
              )
            );
          });
        }
      }
    }
  };

  const handleCanvasMouseUp = (e: React.MouseEvent) => {
    isDraggingCanvas.current = false;
    
    // Finish dragging a node
    if (isDraggingNode && movableNode) {
      // Save the state to history when finished dragging
      saveToHistory(nodes, connections);
    }
  };

  const handleCanvasClick = (e: React.MouseEvent) => {
    // Clear selections unless we're in connection mode
    if (!isCreatingConnection) {
      setSelectedNode(null);
      setSelectedConnection(null);
    }
    
    // If we have a movable node, fix its position when clicking on canvas
    if (movableNode) {
      setMovableNode(null);
      setIsDraggingNode(false);
      showFeedbackToast('Component position fixed');
    }
  };

  // Function to exit move mode
  const exitMoveMode = () => {
    if (movableNode) {
      const node = nodes.find(n => n.id === movableNode);
      setMovableNode(null);
      setIsDraggingNode(false);
      saveToHistory(nodes, connections);
      if (node) {
        showFeedbackToast(`${node.name} is no longer movable`);
      }
    }
  };

  // Function to toggle favorite status of a node
  const toggleFavorite = (nodeId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    setFavorites(prev => {
      const newSet = new Set(prev);
      if (newSet.has(nodeId)) {
        newSet.delete(nodeId);
        showFeedbackToast('Removed from favorites');
      } else {
        newSet.add(nodeId);
        showFeedbackToast('Added to favorites');
      }
      return newSet;
    });
  };

  // Function to toggle expanded/collapsed state of a node type group
  const toggleGroup = (type: string) => {
    setExpandedGroups(prev => {
      const newSet = new Set(prev);
      if (newSet.has(type)) {
        newSet.delete(type);
      } else {
        newSet.add(type);
      }
      return newSet;
    });
  };

  // Effect to measure card heights
  useEffect(() => {
    // Function to measure all card heights
    const measureCardHeights = () => {
      const newHeights: Record<string, number> = {};
      nodes.forEach(node => {
        const element = cardRefs.current[node.id];
        if (element) {
          newHeights[node.id] = element.getBoundingClientRect().height;
        }
      });
      setCardHeights(newHeights);
    };

    // Set up resize observer to measure when DOM changes
    const resizeObserver = new ResizeObserver(() => {
      measureCardHeights();
    });
    
    // Observe all card elements
    Object.values(cardRefs.current).forEach(element => {
      if (element) {
        resizeObserver.observe(element);
      }
    });
    
    return () => {
      resizeObserver.disconnect();
    };
  }, [nodes, expandedNodes]);

  // Effect to adjust positions when a node is expanded
  useEffect(() => {
    // When a node is expanded/collapsed, adjust the positions of nodes below it
    const adjustPositions = () => {
      // Sort nodes by vertical position (top to bottom)
      const sortedNodes = [...nodes].sort((a, b) => a.position.y - b.position.y);
      const updatedNodes = [...nodes];
      let hasChanges = false;
      
      // For each node (in top-to-bottom order)
      for (let i = 0; i < sortedNodes.length; i++) {
        const current = sortedNodes[i];
        const height = cardHeights[current.id] || 100;
        
        // Check all nodes below this one
        for (let j = i + 1; j < sortedNodes.length; j++) {
          const nodeBelow = sortedNodes[j];
          
          // Check if they overlap horizontally (same column)
          const horizontalOverlap = 
            (current.position.x + 200 >= nodeBelow.position.x && 
             current.position.x <= nodeBelow.position.x + 200);
          
          // If they're in the same column and the below node is too close
          if (horizontalOverlap && 
              nodeBelow.position.y < current.position.y + height + 20) { // 20px gap
            
            // Find the nodeBelow in our updatedNodes array
            const nodeBelowIndex = updatedNodes.findIndex(n => n.id === nodeBelow.id);
            if (nodeBelowIndex >= 0) {
              // Update its position
              updatedNodes[nodeBelowIndex] = {
                ...nodeBelow,
                position: {
                  ...nodeBelow.position, 
                  y: current.position.y + height + 20 // Move it below with 20px gap
                }
              };
              
              // Update the sorted nodes array too to reflect new position
              sortedNodes[j] = updatedNodes[nodeBelowIndex];
              hasChanges = true;
            }
          }
        }
      }
      
      // Only update if we made changes
      if (hasChanges) {
        setNodes(updatedNodes);
      }
    };
    
    // Give the DOM time to update before measuring
    const timer = setTimeout(() => {
      adjustPositions();
    }, 100);
    
    return () => clearTimeout(timer);
  }, [expandedNodes, cardHeights]);

  // Add color picker functionality when a node is selected
  const handleNodeColorChange = (nodeId: string, newColor: string) => {
    const updatedNodes = nodes.map(node => {
      if (node.id === nodeId) {
        return { ...node, color: newColor };
      }
      return node;
    });
    
    setNodes(updatedNodes);
    saveToHistory(updatedNodes, connections);
  };

  // Predefined color options
  const colorOptions = [
    '#3b82f6', // blue
    '#10b981', // green
    '#8b5cf6', // purple
    '#f59e0b', // amber
    '#ec4899', // pink
    '#ef4444', // red
    '#06b6d4', // cyan
    '#f97316', // orange
    '#6366f1', // indigo
    '#84cc16', // lime
  ];

  // Create a new empty diagram
  const createNewDiagram = () => {
    if (nodes.length > 0 || connections.length > 0) {
      if (window.confirm("Create a new diagram? Any unsaved changes will be lost.")) {
        setNodes([]);
        setConnections([]);
        setCurrentDiagramName('New Diagram');
        setSelectedNode(null);
        setSelectedConnection(null);
        // Reset history
        const newHistory = [{nodes: [], connections: []}];
        setHistory(newHistory);
        setHistoryIndex(0);
        showFeedbackToast('Created new diagram');
      }
    } else {
      // If current diagram is already empty
      setCurrentDiagramName('New Diagram');
      showFeedbackToast('Created new diagram');
    }
  };

  // Effect to handle escape key for exiting drag mode
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // If we're in movable mode
      if (movableNode) {
        // Use E key to exit drag mode in both fullscreen and normal mode
        if (e.key === 'e' || e.key === 'E') {
          exitMoveMode();
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [movableNode, nodes, connections]);

  // Effect to handle click outside to exit drag mode
  useEffect(() => {
    const handleDocumentClick = (e: MouseEvent) => {
      // If we have a movable node, any click will exit move mode
      // EXCEPT clicks on the node itself or child elements of the node
      if (movableNode) {
        // Find if the click is inside the movable node
        const movableNodeElement = cardRefs.current[movableNode];
        if (movableNodeElement && !movableNodeElement.contains(e.target as Node)) {
          exitMoveMode();
        }
      }
    };

    // We need to use mouseup instead of click to ensure it works properly with drag operations
    document.addEventListener('mouseup', handleDocumentClick);
    return () => {
      document.removeEventListener('mouseup', handleDocumentClick);
    };
  }, [movableNode, nodes, connections]);

  // Handle clicking outside of selected nodes to collapse them by deselecting the node
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      // Only proceed if we have a selected node
      if (selectedNode) {
        // Check if the click was outside the sidebar nodes and node settings panel
        const sidebarNodes = document.querySelectorAll('.sidebar-node');
        const nodeSettingsPanel = document.querySelector('.node-settings-panel');
        
        let clickedInside = false;
        
        // Check if clicked on any sidebar node
        sidebarNodes.forEach(node => {
          if (node.contains(e.target as Node)) {
            clickedInside = true;
          }
        });
        
        // Check if clicked on node settings panel
        if (nodeSettingsPanel && nodeSettingsPanel.contains(e.target as Node)) {
          clickedInside = true;
        }
        
        // If clicked outside both, collapse by deselecting the node
        if (!clickedInside) {
          setSelectedNode(null);
          setEditingNodeId(null);
        }
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [selectedNode]);

  // State for editing node names
  const [editingNodeId, setEditingNodeId] = useState<string | null>(null);
  const [editingNodeName, setEditingNodeName] = useState('');

  // Save edited node name
  const saveNodeNameEdit = () => {
    if (editingNodeId) {
      const updatedNodes = nodes.map(node => {
        if (node.id === editingNodeId) {
          return { ...node, name: editingNodeName };
        }
        return node;
      });
      setNodes(updatedNodes);
      saveToHistory(updatedNodes, connections);
    }
    setEditingNodeId(null);
  };

  return (
    <div 
      ref={diagramContainerRef}
      className={`flex flex-col ${isFullscreen ? 'h-screen' : 'h-full'} bg-muted`}
    >
      {/* Top Bar */}
      <div className="bg-card border-b border-border p-2 flex items-center justify-between">
        <div className="flex items-center">
          {isEditingTitle ? (
            <form 
              onSubmit={(e) => {
                e.preventDefault();
                setIsEditingTitle(false);
              }}
              className="mr-3"
            >
              <input
                ref={titleInputRef}
                type="text"
                value={currentDiagramName}
                onChange={(e) => setCurrentDiagramName(e.target.value)}
                onBlur={() => setIsEditingTitle(false)}
                className="text-lg font-semibold bg-muted/30 border border-border rounded px-2 py-0.5 focus:outline-none focus:ring-2 focus:ring-primary/50"
                autoFocus
              />
            </form>
          ) : (
            <h2 
              className="text-lg font-semibold mr-3 cursor-pointer hover:text-primary"
              onClick={() => setIsEditingTitle(true)}
              title="Click to edit diagram title"
            >
              {currentDiagramName}
            </h2>
          )}
          <button
            onClick={() => setIsSidebarCollapsed(!isSidebarCollapsed)}
            className="mr-2 p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground"
            title={isSidebarCollapsed ? "Show Sidebar" : "Hide Sidebar"}
          >
            {isSidebarCollapsed ? <PanelLeft className="h-4 w-4" /> : <PanelLeftClose className="h-4 w-4" />}
          </button>
        </div>
        
        <div className="flex items-center space-x-1">
          {/* Past Diagrams Button */}
          <div className="relative">
            <button 
              onClick={() => setIsPastDiagramsOpen(!isPastDiagramsOpen)}
              className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground"
              title="View Past Diagrams"
            >
              <List className="h-4 w-4" />
            </button>
            
            {/* Past Diagrams Dropdown */}
            {isPastDiagramsOpen && (
              <div className="absolute right-0 mt-1 w-64 bg-white rounded-md shadow-lg overflow-hidden z-50 border border-border">
                <div className="py-2 max-h-96 overflow-y-auto">
                  <div className="px-4 py-2 text-sm font-medium text-muted-foreground border-b border-border flex justify-between items-center">
                    <span>Your Saved Diagrams</span>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        createNewDiagram();
                        setIsPastDiagramsOpen(false);
                      }}
                      className="text-xs bg-primary text-white px-2 py-0.5 rounded flex items-center hover:bg-primary/90"
                      title="Create new diagram"
                    >
                      <Plus className="h-3 w-3 mr-1" />
                      New
                    </button>
                  </div>
                  
                  {savedDiagrams.length === 0 ? (
                    <div className="px-4 py-3 text-sm text-muted-foreground">
                      No saved diagrams yet
                    </div>
                  ) : (
                    <>
                      {savedDiagrams.map(diagram => (
                        <div
                          key={diagram.id}
                          className="flex items-center justify-between px-4 py-2 text-sm hover:bg-muted/50 cursor-pointer"
                          onClick={() => {
                            // Load the diagram
                            const savedDiagram = localStorage.getItem(`beaUX-diagram-${diagram.id}`);
                            if (savedDiagram) {
                              try {
                                const parsed = JSON.parse(savedDiagram);
                                setNodes(parsed.nodes);
                                setConnections(parsed.connections);
                                setCurrentDiagramName(parsed.name || 'Untitled Diagram');
                                saveToHistory(parsed.nodes, parsed.connections);
                                showFeedbackToast('Diagram loaded');
                                setIsPastDiagramsOpen(false);
                              } catch (err) {
                                console.error('Failed to load saved diagram:', err);
                                showFeedbackToast('Error loading diagram');
                              }
                            }
                          }}
                        >
                          <div className="flex-1 truncate">
                            <span className="font-medium">{diagram.name}</span>
                            <span className="block text-xs text-muted-foreground">
                              {new Date(diagram.timestamp).toLocaleDateString()}
                            </span>
                          </div>
                          <button
                            onClick={(e) => deleteDiagram(diagram.id, e)}
                            className="p-1 rounded-md hover:bg-red-100 text-red-600"
                            title="Delete diagram"
                          >
                            <Trash className="h-3 w-3" />
                          </button>
                        </div>
                      ))}
                    </>
                  )}
                </div>
              </div>
            )}
          </div>
          
          {/* Undo/Redo */}
          <button 
            onClick={() => {
              if (historyIndex > 0) {
                const newIndex = historyIndex - 1;
                const prevState = history[newIndex];
                setNodes(prevState.nodes);
                setConnections(prevState.connections);
                setHistoryIndex(newIndex);
              }
            }} 
            disabled={historyIndex <= 0}
            className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground disabled:opacity-50 disabled:pointer-events-none"
            title="Undo"
          >
            <Undo2 className="h-4 w-4" />
          </button>
          <button 
            onClick={() => {
              if (historyIndex < history.length - 1) {
                const newIndex = historyIndex + 1;
                const nextState = history[newIndex];
                setNodes(nextState.nodes);
                setConnections(nextState.connections);
                setHistoryIndex(newIndex);
              }
            }}
            disabled={historyIndex >= history.length - 1}
            className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground disabled:opacity-50 disabled:pointer-events-none"
            title="Redo"
          >
            <Redo2 className="h-4 w-4" />
          </button>
          
          <div className="h-4 mx-1 border-r border-border" />
          
          {/* Pan Mode Toggle */}
          <button 
            onClick={() => setIsPanMode(!isPanMode)}
            className={`p-1.5 rounded ${isPanMode ? 'bg-muted text-foreground' : 'hover:bg-muted text-muted-foreground hover:text-foreground'}`}
            title="Toggle Pan Mode"
          >
            {isPanMode ? <Hand className="h-4 w-4" /> : <MousePointer className="h-4 w-4" />}
          </button>
          
          {/* Zoom Controls */}
          <button 
            onClick={() => setZoom(prev => Math.min(prev + 0.1, 2))}
            className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground"
            title="Zoom In"
          >
            <ZoomIn className="h-4 w-4" />
          </button>
          <button 
            onClick={() => setZoom(prev => Math.max(prev - 0.1, 0.5))}
            className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground"
            title="Zoom Out"
          >
            <ZoomOut className="h-4 w-4" />
          </button>
          
          <div className="h-4 mx-1 border-r border-border" />
          
          {/* Save/Load */}
          <button 
            onClick={() => setIsSaveModalOpen(true)}
            className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground"
            title="Save Diagram"
          >
            <Save className="h-4 w-4" />
          </button>
          <button 
            onClick={() => setIsLoadModalOpen(true)}
            className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground"
            title="Load Diagram"
          >
            <FileCog className="h-4 w-4" />
          </button>
          
          {/* Import/Export */}
          <button 
            onClick={() => setIsImportModalOpen(true)}
            className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground"
            title="Import JSON"
          >
            <FileJson className="h-4 w-4" />
          </button>
          <button 
            onClick={exportDiagramToJson}
            className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground"
            title="Export to JSON"
          >
            <Download className="h-4 w-4" />
          </button>
          <button 
            onClick={exportDiagramAsPng}
            className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground"
            title="Export as PNG"
          >
            <Image className="h-4 w-4" />
          </button>
          
          {/* Fullscreen Toggle */}
          <button 
            onClick={toggleFullscreen}
            className="p-1.5 rounded hover:bg-muted text-muted-foreground hover:text-foreground"
            title={isFullscreen ? "Exit Fullscreen" : "Enter Fullscreen"}
          >
            {isFullscreen ? <Minimize className="h-4 w-4" /> : <Maximize className="h-4 w-4" />}
          </button>
          
          {/* New Diagram Button */}
          <button
            onClick={createNewDiagram}
            className="p-1.5 mr-2 rounded hover:bg-muted text-muted-foreground hover:text-foreground bg-green-100 flex items-center"
            title="Create new diagram"
          >
            <Plus className="h-4 w-4 text-green-600" />
            <span className="ml-1 text-xs font-medium text-green-800">New Diagram</span>
          </button>
        </div>
      </div>
      
      {/* Canvas and Sidebar */}
      <div className="flex flex-1 min-h-0">
        {/* Sidebar */}
        <div 
          className={`border-r border-border overflow-y-auto bg-white transition-all duration-200 ${
            isSidebarCollapsed ? 'w-0 px-0 overflow-hidden' : 'overflow-y-auto p-2'
          }`}
          style={{ width: isSidebarCollapsed ? 0 : sidebarWidth }}
        >
          {/* Component form */}
          {/* Add Component Form */}
          <form className="flex items-center mb-3" onSubmit={(e) => {
            e.preventDefault();
            if (!newNodeName.trim()) return;
            
            // Calculate viewport center based on canvas offset, zoom, and container dimensions
            const containerRect = canvasContainerRef.current?.getBoundingClientRect();
            const viewportCenterX = containerRect ? 
              (-canvasOffset.x + containerRect.width / 2) / zoom : 200;
            const viewportCenterY = containerRect ? 
              (-canvasOffset.y + containerRect.height / 2) / zoom : 200;
            
            const newNode: ComponentNode = {
              id: `n${Date.now()}`,
              name: newNodeName,
              position: { x: viewportCenterX - 100, y: viewportCenterY - 40 }, // Center in viewport
              color: colors[newNodeType],
              type: newNodeType,
              code: '',
              notes: '',
              isCodeCollapsed: true
            };
            
            const updatedNodes = [...nodes, newNode];
            setNodes(updatedNodes);
            setNewNodeName('');
            saveToHistory(updatedNodes, connections);
          }}>
            <input
              type="text"
              value={newNodeName}
              onChange={(e) => setNewNodeName(e.target.value)}
              placeholder="New component"
              className="text-xs border border-border rounded-l-md px-2 py-1.5 w-32"
            />
            <select
              value={newNodeType}
              onChange={(e) => setNewNodeType(e.target.value as ComponentNode['type'])}
              className="text-xs border-y border-r border-border rounded-r-md px-1 py-1.5 bg-white"
            >
              <option value="component">Component</option>
              <option value="page">Page</option>
              <option value="hook">Hook</option>
              <option value="util">Utility</option>
              <option value="notes">Notes</option>
            </select>
            <button 
              type="submit"
              className="ml-1 bg-primary text-white rounded-md p-1 hover:bg-primary/90"
              title="Add component"
            >
              <Plus className="h-3 w-3" />
            </button>
          </form>
          
          {/* Sidebar Organization Controls */}
          <div className="space-y-2 mb-4">
            {/* Search Bar */}
            <div className="relative">
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search components..."
                className="w-full text-xs border border-border rounded-md pl-7 pr-2 py-1.5 bg-white"
              />
              <div className="absolute left-2 top-1.5 text-gray-400">
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <circle cx="11" cy="11" r="8"></circle>
                  <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
              </div>
              {searchTerm && (
                <button 
                  onClick={() => setSearchTerm('')}
                  className="absolute right-2 top-1.5 text-gray-400 hover:text-gray-600"
                >
                  <X className="h-3 w-3" />
                </button>
              )}
            </div>
            
            {/* Favorites Toggle */}
            <label className="flex items-center gap-1.5 text-xs text-gray-700 hover:text-gray-900 cursor-pointer">
              <input 
                type="checkbox" 
                checked={showOnlyFavorites}
                onChange={() => setShowOnlyFavorites(!showOnlyFavorites)}
                className="rounded text-blue-500"
              />
              Show favorites only
            </label>
          </div>
          
          {/* Nodes List */}
          {showOnlyFavorites ? (
            // Favorites View
            <div className="space-y-1">
              <h3 className="text-xs font-medium text-gray-500 mb-2">Favorites</h3>
              {nodes
                .filter(node => favorites.has(node.id))
                .map(node => (
                  <div
                    key={node.id}
                    className={`sidebar-node flex items-center justify-between p-2 rounded-md text-xs ${
                      selectedNode === node.id ? 'bg-gray-800 border-2 border-blue-500' : 'bg-gray-800 border border-gray-700'
                    }`}
                    onClick={() => {
                      setSelectedNode(node.id === selectedNode ? null : node.id);
                      if (selectedNode !== node.id) {
                        setEditingNodeId(null);
                      }
                    }}
                  >
                    <div className="flex items-center gap-1 flex-1 min-w-0">
                      <span 
                        className="h-2.5 w-2.5 rounded-full flex-shrink-0"
                        style={{ backgroundColor: node.color || '#2dd4bf' }}
                      ></span>
                      {editingNodeId === node.id ? (
                        <input
                          className="bg-white text-gray-900 rounded px-1 py-0.5 w-full focus:outline-none focus:ring-1 focus:ring-blue-500"
                          value={editingNodeName}
                          onChange={(e) => setEditingNodeName(e.target.value)}
                          onClick={(e) => e.stopPropagation()}
                          onKeyDown={(e) => {
                            if (e.key === 'Enter') {
                              saveNodeNameEdit();
                            } else if (e.key === 'Escape') {
                              setEditingNodeId(null);
                            }
                          }}
                          autoFocus
                          onBlur={saveNodeNameEdit}
                        />
                      ) : (
                        <span 
                          className={`truncate text-white`}
                          onDoubleClick={(e) => {
                            e.stopPropagation();
                            setEditingNodeId(node.id);
                            setEditingNodeName(node.name);
                          }}
                        >
                          {node.name}
                        </span>
                      )}
                    </div>
                    <div className="flex space-x-1">
                      <button
                        onClick={(e) => toggleFavorite(node.id, e)}
                        className="p-1 rounded-md hover:bg-yellow-500/50 text-yellow-400"
                        title="Remove from favorites"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round">
                          <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                        </svg>
                      </button>
                      <button 
                        onClick={(e) => {
                          e.stopPropagation();
                          // Filter nodes and connections that don't involve this node
                          const newNodes = nodes.filter(n => n.id !== node.id);
                          const newConnections = connections.filter(
                            c => c.sourceId !== node.id && c.targetId !== node.id
                          );
                          
                          setNodes(newNodes);
                          setConnections(newConnections);
                          setSelectedNode(null);
                          saveToHistory(newNodes, newConnections);
                        }}
                        className="p-1 rounded-md hover:bg-red-500/50 text-gray-300"
                        title="Delete component"
                      >
                        <Trash className="h-3.5 w-3.5" />
                      </button>
                    </div>
                  </div>
                ))}
            </div>
          ) : (
            // Categorized View
            <div className="space-y-2">
              {Object.entries(
                nodes
                  .filter(node => {
                    if (!searchTerm) return true;
                    return (
                      node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                      node.type.toLowerCase().includes(searchTerm.toLowerCase())
                    );
                  })
                  .reduce((acc, node) => {
                    acc[node.type] = [...(acc[node.type] || []), node];
                    return acc;
                  }, {} as Record<string, ComponentNode[]>)
              ).map(([type, typeNodes]) => (
                <div key={type} className="mb-2">
                  <button 
                    onClick={() => toggleGroup(type)}
                    className="flex items-center justify-between w-full text-xs font-medium py-1 px-2 bg-gray-700 rounded-md text-white hover:bg-gray-600 transition-colors"
                  >
                    <span>{type}s ({typeNodes.length})</span>
                    {expandedGroups.has(type) ? 
                      <ArrowDown className="h-3 w-3" /> : 
                      <ArrowRight className="h-3 w-3" />
                    }
                  </button>
                  
                  {expandedGroups.has(type) && (
                    <div className="mt-1 space-y-1 pl-1">
                      {typeNodes.map(node => (
                        <div
                          key={node.id}
                          className={`sidebar-node flex items-center justify-between p-2 rounded-md text-xs ${
                            selectedNode === node.id ? 'bg-gray-800 border-2 border-blue-500' : 'bg-gray-800 border border-gray-700'
                          }`}
                          onClick={() => {
                            setSelectedNode(node.id === selectedNode ? null : node.id);
                            if (selectedNode !== node.id) {
                              setEditingNodeId(null);
                            }
                          }}
                        >
                          <div className="flex items-center gap-1 flex-1 min-w-0">
                            <span 
                              className="h-2.5 w-2.5 rounded-full flex-shrink-0"
                              style={{ backgroundColor: node.color || '#2dd4bf' }}
                            ></span>
                            {editingNodeId === node.id ? (
                              <input
                                className="bg-white text-gray-900 rounded px-1 py-0.5 w-full focus:outline-none focus:ring-1 focus:ring-blue-500"
                                value={editingNodeName}
                                onChange={(e) => setEditingNodeName(e.target.value)}
                                onClick={(e) => e.stopPropagation()}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    saveNodeNameEdit();
                                  } else if (e.key === 'Escape') {
                                    setEditingNodeId(null);
                                  }
                                }}
                                autoFocus
                                onBlur={saveNodeNameEdit}
                              />
                            ) : (
                              <span 
                                className={`truncate text-white`}
                                onDoubleClick={(e) => {
                                  e.stopPropagation();
                                  setEditingNodeId(node.id);
                                  setEditingNodeName(node.name);
                                }}
                              >
                                {node.name}
                              </span>
                            )}
                          </div>
                          <div className="flex space-x-1">
                            <button
                              onClick={(e) => toggleFavorite(node.id, e)}
                              className={`p-1 rounded-md ${favorites.has(node.id) ? 'text-yellow-400 hover:bg-yellow-500/50' : 'text-gray-400 hover:bg-gray-600'}`}
                              title={favorites.has(node.id) ? "Remove from favorites" : "Add to favorites"}
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill={favorites.has(node.id) ? "currentColor" : "none"} stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round">
                                <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                              </svg>
                            </button>
                            <button 
                              onClick={(e) => {
                                e.stopPropagation();
                                // Filter nodes and connections that don't involve this node
                                const newNodes = nodes.filter(n => n.id !== node.id);
                                const newConnections = connections.filter(
                                  c => c.sourceId !== node.id && c.targetId !== node.id
                                );
                                
                                setNodes(newNodes);
                                setConnections(newConnections);
                                setSelectedNode(null);
                                saveToHistory(newNodes, newConnections);
                              }}
                              className="p-1 rounded-md hover:bg-red-500/50 text-gray-300"
                              title="Delete component"
                            >
                              <Trash className="h-3.5 w-3.5" />
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
          
          {/* Node Settings Panel - shows when a node is selected */}
          {selectedNode && (
            <div className="mt-4 p-3 bg-gray-50 rounded-md border border-gray-200 node-settings-panel">
              <h3 className="text-xs font-medium mb-2">Node Settings</h3>
              
              {/* Color picker */}
              <div className="mb-3">
                <label className="text-xs text-gray-500 block mb-1">Color</label>
                <div className="flex flex-wrap gap-1">
                  {colorOptions.map(color => (
                    <button
                      key={color}
                      className={`w-5 h-5 rounded-full transition-all ${
                        nodes.find(n => n.id === selectedNode)?.color === color ? 
                        'ring-2 ring-offset-1 ring-gray-400' : ''
                      }`}
                      style={{ backgroundColor: color }}
                      onClick={() => handleNodeColorChange(selectedNode, color)}
                      title={`Change to ${color}`}
                    />
                  ))}
                  
                  {/* Custom color input */}
                  <input
                    type="color"
                    className="w-5 h-5 rounded-full cursor-pointer"
                    value={nodes.find(n => n.id === selectedNode)?.color || '#000000'}
                    onChange={(e) => handleNodeColorChange(selectedNode, e.target.value)}
                    title="Custom color"
                  />
                </div>
              </div>
              
              {/* Node type */}
              <div className="mb-3">
                <label className="text-xs text-gray-500 block mb-1">Type</label>
                <select
                  className="w-full text-xs border border-gray-300 rounded px-1 py-1"
                  value={nodes.find(n => n.id === selectedNode)?.type || 'component'}
                  onChange={(e) => {
                    const type = e.target.value as ComponentNode['type'];
                    const updatedNodes = nodes.map(node => {
                      if (node.id === selectedNode) {
                        // Update type but keep custom color if already set
                        return { ...node, type };
                      }
                      return node;
                    });
                    
                    setNodes(updatedNodes);
                    saveToHistory(updatedNodes, connections);
                  }}
                >
                  <option value="component">Component</option>
                  <option value="page">Page</option>
                  <option value="hook">Hook</option>
                  <option value="util">Utility</option>
                  <option value="notes">Notes</option>
                </select>
              </div>
              
              {/* Delete button */}
              <button
                onClick={() => {
                  // Filter nodes and connections that don't involve this node
                  const newNodes = nodes.filter(n => n.id !== selectedNode);
                  const newConnections = connections.filter(
                    c => c.sourceId !== selectedNode && c.targetId !== selectedNode
                  );
                  
                  setNodes(newNodes);
                  setConnections(newConnections);
                  setSelectedNode(null);
                  saveToHistory(newNodes, newConnections);
                }}
                className="w-full text-xs text-white bg-red-500 hover:bg-red-600 rounded px-2 py-1 flex items-center justify-center gap-1"
              >
                <Trash className="h-3 w-3" />
                Delete Node
              </button>
            </div>
          )}

          {/* Connection Settings Panel - shows when a connection is selected */}
          {selectedConnection && !selectedNode && (
            <div className="mt-4 p-3 bg-gray-50 rounded-md border border-gray-200">
              <h3 className="text-xs font-medium mb-2">Connection Settings</h3>
              
              {/* Connection info */}
              {(() => {
                const connection = connections.find(c => c.id === selectedConnection);
                if (!connection) return null;
                
                const sourceNode = nodes.find(n => n.id === connection.sourceId);
                const targetNode = nodes.find(n => n.id === connection.targetId);
                
                if (!sourceNode || !targetNode) return null;
                
                return (
                  <>
                    <div className="mb-3">
                      <div className="text-gray-400 text-sm mb-1">From</div>
                      <div className="text-white">{sourceNode?.name || 'Unknown'}</div>
                    </div>
                    
                    <div className="mb-3">
                      <div className="text-gray-400 text-sm mb-1">To</div>
                      <div className="text-white">{targetNode?.name || 'Unknown'}</div>
                    </div>
                    
                    <button
                      onClick={() => {
                        // Remove this connection
                        const newConnections = connections.filter(c => c.id !== selectedConnection);
                        setConnections(newConnections);
                        setSelectedConnection(null);
                        saveToHistory(nodes, newConnections);
                        showFeedbackToast("Connection deleted");
                      }}
                      className="w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-md transition-colors"
                    >
                      Delete Connection
                    </button>
                  </>
                );
              })()}
            </div>
          )}
        </div>
        
        {/* Canvas */}
        <div 
          ref={canvasContainerRef}
          className={`relative flex-1 ${isFullscreen ? 'h-[calc(100vh-44px)]' : 'h-[calc(100vh-180px)]'} overflow-hidden ${
            isPanMode 
              ? 'cursor-grab' 
              : isDraggingCanvas.current 
                ? 'cursor-grabbing' 
                : isDraggingNode ? 'cursor-move' : 'cursor-default'
          }`}
          style={{ 
            backgroundSize: `${20 * zoom}px ${20 * zoom}px`,
            backgroundImage: `
              radial-gradient(circle at 30% 20%, rgba(20, 0, 40, 0.2) 0%, transparent 20%),
              radial-gradient(circle at 70% 60%, rgba(10, 10, 50, 0.15) 0%, transparent 30%),
              radial-gradient(circle at 10% 80%, rgba(30, 5, 50, 0.1) 0%, transparent 30%),
              radial-gradient(circle at 80% 15%, rgba(15, 0, 30, 0.15) 0%, transparent 40%)
            `,
            backgroundColor: '#000005',
            boxShadow: 'inset 0 0 80px rgba(30, 0, 60, 0.1)'
          }}
          onMouseDown={(e) => {
            // When in pan mode or clicking directly on the canvas background
            if (isPanMode || e.target === e.currentTarget) {
              isDraggingCanvas.current = true;
              lastMousePosition.current = { x: e.clientX, y: e.clientY };
              
              // Change cursor style to indicate grabbing
              if (canvasContainerRef.current) {
                canvasContainerRef.current.style.cursor = 'grabbing';
              }
            }
            
            // Clear selection when clicking on empty canvas area
            if (e.target === e.currentTarget) {
              // If we are in dragging mode, end it and save history
              if (isDraggingNode) {
                setIsDraggingNode(false);
                saveToHistory(nodes, connections);
              }
              setSelectedNode(null);
              setSelectedConnection(null);
            }
          }}
          onMouseMove={handleMouseMove}
          onMouseUp={handleCanvasMouseUp}
          onClick={handleCanvasClick} // Add click handler here
        >
          {/* Connection creation UI */}
          {isCreatingConnection && connectionStart && (
            <div className="absolute top-4 left-1/2 transform -translate-x-1/2 bg-black/80 text-white px-4 py-2 rounded-lg z-50 shadow-lg border border-gray-700 flex items-center gap-3">
              <span>Click on any component card to create a connection</span>
              <button 
                onClick={() => {
                  setIsCreatingConnection(false);
                  setConnectionStart(null);
                }}
                className="bg-gray-700 hover:bg-gray-600 px-2 py-1 rounded text-sm"
              >
                Cancel
              </button>
            </div>
          )}
          
          {/* Connection preview when creating */}
          {isCreatingConnection && connectionStart && (
            <svg className="absolute inset-0 z-10 pointer-events-none">
              <path
                d={`M ${getNodeCenter(connectionStart).x} ${getNodeCenter(connectionStart).y} L ${mousePosition.x} ${mousePosition.y}`}
                stroke="#22c55e"
                strokeWidth={2}
                strokeDasharray="5,5"
                fill="none"
              />
            </svg>
          )}
          
          {/* Feedback toast */}
          {showFeedback && (
            <div className="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-md shadow-md z-50 text-xs">
              {feedbackMessage}
            </div>
          )}

          {/* Main canvas content */}
          <div 
            className="absolute inset-0 pointer-events-none" 
            style={{ 
              transform: `scale(${zoom})`, 
              transformOrigin: '0 0',
              left: `${canvasOffset.x}px`,
              top: `${canvasOffset.y}px`
            }}
          >
            {/* Stars */}
            <div className="stars-small"></div>
            <div className="stars-medium"></div>
            <div className="stars-large"></div>
            
            {/* Connections Layer - Renders BENEATH components */}
            <svg className="absolute inset-0 w-full h-full pointer-events-none overflow-visible" style={{ overflow: 'visible', zIndex: 1 }}>
              {/* Live connection preview */}
              {isCreatingConnection && connectionStart && (
                <path
                  d={`M ${getNodeCenter(connectionStart).x} ${getNodeCenter(connectionStart).y} L ${mousePosition.x} ${mousePosition.y}`}
                  stroke="#2dd4bf"
                  strokeWidth={2}
                  strokeDasharray="5,5"
                  fill="none"
                />
              )}
              
              {/* Existing connections */}
              {connections.map(connection => {
                // Get the centers of both nodes
                const sourceCenter = getNodeCenter(connection.sourceId);
                const targetCenter = getNodeCenter(connection.targetId);
                
                // Draw a simple curved line between them
                const dx = targetCenter.x - sourceCenter.x;
                const dy = targetCenter.y - sourceCenter.y;
                
                // Adjust the midpoint based on multiple connections
                // Randomly offset each connection slightly to make multiple connections visible
                const mid = connection.id.charCodeAt(connection.id.length - 1) % 50 - 25;
                const midX = (sourceCenter.x + targetCenter.x) / 2;
                const midY = (sourceCenter.y + targetCenter.y) / 2 + mid;
                
                // Create a simple quadratic bezier curve path
                const path = `M ${sourceCenter.x} ${sourceCenter.y} Q ${midX} ${midY} ${targetCenter.x} ${targetCenter.y}`;
                
                return (
                  <g key={connection.id}>
                    {/* Wider invisible path for easier selection */}
                    <path
                      d={path}
                      stroke="transparent"
                      strokeWidth={20}
                      fill="none"
                      className="pointer-events-auto"
                      onClick={(e) => {
                        e.stopPropagation();
                        setSelectedConnection(connection.id);
                        setSelectedNode(null);
                      }}
                      style={{ cursor: 'pointer' }}
                    />
                    
                    {/* Visible connection line */}
                    <path
                      d={path}
                      stroke={selectedConnection === connection.id ? '#22c55e' : '#94a3b8'}
                      strokeWidth={selectedConnection === connection.id ? 3 : 2}
                      fill="none"
                      strokeDasharray={selectedConnection === connection.id ? "" : ""}
                      className="pointer-events-none"
                    />
                    
                    {/* Simple arrow at the end */}
                    <circle
                      cx={targetCenter.x}
                      cy={targetCenter.y}
                      r={4}
                      fill={selectedConnection === connection.id ? '#22c55e' : '#94a3b8'}
                      className="pointer-events-none"
                    />
                  </g>
                );
              })}
            </svg>

            {/* Component Nodes Layer */}
            {nodes.map(node => (
              <div 
                key={node.id}
                ref={el => cardRefs.current[node.id] = el}
                style={{
                  position: 'absolute',
                  left: `${node.position.x}px`,
                  top: `${node.position.y}px`,
                  width: '200px',
                  minHeight: '80px',
                  transform: node.id === movableNode ? 'scale(1.02)' : 'scale(1)',
                  transition: node.id === movableNode ? 'box-shadow 0.1s ease, transform 0.1s ease' : 'box-shadow 0.2s ease, transform 0.2s ease',
                  zIndex: node.id === movableNode ? 100 : 10,
                  boxShadow: node.id === movableNode ? '0 10px 25px -5px rgba(0, 0, 0, 0.2)' : '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
                  backgroundColor: expandedNodes.has(node.id) 
                    ? `${node.color}f0` // Using semi-transparent version of the component color
                    : node.color || '#6366f1',
                  borderRadius: '8px',
                  border: selectedNode === node.id 
                    ? '2px solid #3b82f6' 
                    : expandedNodes.has(node.id) 
                      ? `1px solid ${node.color}` 
                      : '1px solid transparent'
                }}
                className={`node-card overflow-hidden galaxy-node pointer-events-auto ${movableNode === node.id ? 'cursor-move' : 'cursor-pointer'} absolute p-3 backdrop-blur-sm`}
                onClick={(e) => {
                  e.stopPropagation();
                  
                  // If we're in connection creation mode
                  if (isCreatingConnection && connectionStart) {
                    // Don't connect to self
                    if (node.id !== connectionStart) {
                      // Create the connection with a simple unique ID - ensure uniqueness with timestamp
                      const newConnection: Connection = {
                        id: `c-${connectionStart}-${node.id}-${Date.now()}`,
                        sourceId: connectionStart,
                        targetId: node.id,
                        label: ""
                      };
                      
                      // Add the new connection
                      const newConnections = [...connections, newConnection];
                      setConnections(newConnections);
                      saveToHistory(nodes, newConnections);
                      
                      showFeedbackToast(`Connected ${nodes.find(n => n.id === connectionStart)?.name || 'node'} to ${node.name}`);
                    } else {
                      showFeedbackToast("Cannot connect a node to itself");
                    }
                    
                    // Reset connection creation state
                    setIsCreatingConnection(false);
                    setConnectionStart(null);
                  } else {
                    // Just select the node when clicked
                    setSelectedNode(node.id === selectedNode ? null : node.id);
                    setSelectedConnection(null);
                  }
                }}
                onMouseDown={(e) => {
                  e.stopPropagation(); // Prevent canvas drag when clicking on node
                }}
              >
                {/* Movable mode tooltip - appears above the card */}
                {movableNode === node.id && (
                  <div className="absolute -top-8 left-0 right-0 flex justify-center pointer-events-none">
                    <div className="bg-black/70 text-white text-xs py-1 px-2 rounded-md shadow-sm backdrop-blur-sm">
                      Press <span className="font-bold mx-1">E</span> to exit move mode
                    </div>
                  </div>
                )}
                
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-1">
                    <span 
                      className="h-2.5 w-2.5 rounded-full"
                      style={{ backgroundColor: node.color || '#2dd4bf' }}
                    ></span>
                    <span className="text-white">{node.name}</span>
                  </div>
                  <div className="flex">
                    <button 
                      onClick={(e) => {
                        e.stopPropagation();
                        // Create connection from this node
                        setSelectedNode(node.id);
                        setConnectionStart(node.id);
                        setIsCreatingConnection(true);
                        showFeedbackToast(`Select any component to connect from ${node.name}`);
                      }}
                      className="p-1 rounded-md hover:bg-indigo-800/50 text-gray-300 mr-1"
                      title="Create connection"
                    >
                      <Link className="h-3.5 w-3.5" />
                    </button>
                    <button 
                      onClick={(e) => {
                        e.stopPropagation();
                        // Toggle movable state for this node
                        if (movableNode === node.id) {
                          setMovableNode(null);
                          setIsDraggingNode(false);
                        } else {
                          setMovableNode(node.id);
                          setSelectedNode(node.id);
                          setIsDraggingNode(true);
                          showFeedbackToast(`${node.name} is now movable - press E to fix position`);
                        }
                      }}
                      className={`p-1 rounded-md hover:bg-indigo-800/50 text-gray-300 mr-1 ${
                        movableNode === node.id ? 'bg-indigo-800/70 text-white' : ''
                      }`}
                      title={movableNode === node.id 
                        ? `Press E to exit move mode` 
                        : "Make component movable"}
                    >
                      <Move className="h-3.5 w-3.5" />
                    </button>
                    <button 
                      onClick={(e) => {
                        e.stopPropagation();
                        // Update expanded nodes set instead of single state
                        const newExpandedNodes = new Set(expandedNodes);
                        if (newExpandedNodes.has(node.id)) {
                          newExpandedNodes.delete(node.id);
                        } else {
                          newExpandedNodes.add(node.id);
                        }
                        setExpandedNodes(newExpandedNodes);
                      }}
                      className="p-1 rounded-md hover:bg-indigo-800/50 text-gray-300"
                      title={expandedNodes.has(node.id) ? "Collapse" : "Expand"}
                    >
                      <ChevronRight className={`h-3.5 w-3.5 transform transition-transform ${
                        expandedNodes.has(node.id) ? 'rotate-90' : ''
                      }`} />
                    </button>
                  </div>
                </div>
                
                {/* Component expanded details (notes & code) */}
                {expandedNodes.has(node.id) && (
                  <div className="mt-2 border-t border-white/20 pt-2 relative">
                    <div className="flex items-center justify-between mb-1">
                      <label className="text-[10px] font-medium text-white">Notes:</label>
                    </div>
                    <textarea
                      className="w-full text-xs bg-black/30 p-2 rounded-md border border-white/20 resize-none text-white"
                      style={{ minHeight: '80px' }}
                      value={node.notes || ''}
                      onChange={(e) => {
                        // Auto-grow the textarea
                        autoGrowTextarea(e.target);
                        
                        const updatedNodes = nodes.map(n => {
                          if (n.id === node.id) {
                            return { ...n, notes: e.target.value };
                          }
                          return n;
                        });
                        
                        setNodes(updatedNodes);
                      }}
                      onFocus={(e) => autoGrowTextarea(e.target)}
                      onBlur={(e) => {
                        autoGrowTextarea(e.target);
                        saveToHistory(nodes, connections);
                      }}
                      placeholder="Add notes about this component..."
                      onClick={(e) => e.stopPropagation()}
                    ></textarea>
                    
                    <div className="mt-2">
                      <div className="flex items-center justify-between mb-1">
                        <label className="text-[10px] font-medium text-white">Component Code:</label>
                        <button
                          className="text-[10px] text-white/80 hover:text-white px-1.5 py-0.5 rounded hover:bg-black/30"
                          onClick={(e) => {
                            e.stopPropagation();
                            const updatedNodes = nodes.map(n => {
                              if (n.id === node.id) {
                                return { 
                                  ...n, 
                                  isCodeCollapsed: !n.isCodeCollapsed,
                                };
                              }
                              return n;
                            });
                            setNodes(updatedNodes);
                            saveToHistory(updatedNodes, connections);
                          }}
                        >
                          {node.isCodeCollapsed ? 'Show' : 'Hide'}
                        </button>
                      </div>
                      
                      {!node.isCodeCollapsed && (
                        <textarea
                          className="w-full text-[10px] bg-black/30 p-2 rounded-md font-mono border border-white/20 resize-none text-white"
                          style={{ minHeight: '100px' }}
                          value={node.code || ''}
                          onChange={(e) => {
                            // Auto-grow the textarea
                            autoGrowTextarea(e.target);
                            
                            const updatedNodes = nodes.map(n => {
                              if (n.id === node.id) {
                                return { ...n, code: e.target.value };
                              }
                              return n;
                            });
                            
                            setNodes(updatedNodes);
                          }}
                          onFocus={(e) => autoGrowTextarea(e.target)}
                          onBlur={(e) => {
                            autoGrowTextarea(e.target);
                            saveToHistory(nodes, connections);
                          }}
                          placeholder="// Enter component code here..."
                          onClick={(e) => e.stopPropagation()}
                        ></textarea>
                      )}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
      
      {/* Import JSON Modal */}
      {isImportModalOpen && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg max-w-2xl w-full max-h-[80vh] flex flex-col">
            <div className="p-4 border-b flex items-center justify-between">
              <h3 className="font-semibold">Import Diagram from JSON</h3>
              <button onClick={() => {
                setIsImportModalOpen(false);
                setImportJsonText('');
                setImportError(null);
              }} className="hover:bg-muted rounded p-1">
                <X className="h-4 w-4" />
              </button>
            </div>
            
            <div className="p-4 flex-1 overflow-auto">
              <p className="text-sm text-muted-foreground mb-4">
                Paste your diagram JSON below or upload a JSON file. 
                <a 
                  href="#" 
                  onClick={(e) => {
                    e.preventDefault();
                    // Copy the AI prompt to clipboard
                    navigator.clipboard.writeText(aiPromptTemplate)
                      .then(() => showFeedbackToast('AI prompt copied to clipboard'))
                      .catch(err => console.error('Failed to copy: ', err));
                  }}
                  className="ml-1 text-blue-600 hover:underline"
                >
                  Copy AI prompt template
                </a>
              </p>
              
              <div className="mb-4">
                <label className="block text-sm font-medium mb-2">Upload JSON File</label>
                <input 
                  type="file" 
                  accept=".json" 
                  onChange={handleFileUpload}
                  className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-muted file:text-foreground hover:file:bg-muted/80"
                />
              </div>
              
              <label className="block text-sm font-medium mb-2">JSON Content</label>
              <textarea
                value={importJsonText}
                onChange={(e) => {
                  setImportJsonText(e.target.value);
                  setImportError(null);
                }}
                placeholder="Paste your diagram JSON here..."
                className="w-full h-64 border rounded p-2 font-mono text-sm resize-none"
              />
              
              {importError && (
                <div className="mt-2 text-sm text-red-600 bg-red-50 p-2 rounded border border-red-200">
                  {importError}
                </div>
              )}
            </div>
            
            <div className="p-4 border-t flex justify-end gap-2">
              <button 
                onClick={() => {
                  setIsImportModalOpen(false);
                  setImportJsonText('');
                  setImportError(null);
                }}
                className="px-3 py-2 rounded text-sm bg-muted/50 hover:bg-muted text-foreground"
              >
                Cancel
              </button>
              <button 
                onClick={importDiagramFromJson}
                disabled={!importJsonText.trim()}
                className="px-3 py-2 rounded text-sm bg-primary/90 hover:bg-primary text-primary-foreground disabled:opacity-50 disabled:pointer-events-none"
              >
                Import Diagram
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Save Modal */}
      {isSaveModalOpen && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="w-96 bg-card rounded-lg shadow-xl">
            <div className="flex items-center justify-between border-b border-border p-4">
              <h3 className="text-lg font-medium">Save Diagram</h3>
              <button 
                onClick={() => {
                  setIsSaveModalOpen(false);
                  setSaveSuccess(false);
                }}
                className="text-muted-foreground hover:text-foreground"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <form 
              className="p-4" 
              onSubmit={(e) => {
                e.preventDefault();
                
                try {
                  // Create a unique ID if this is a new save
                  const diagramId = `d${Date.now()}`;
                  
                  // Prepare the data
                  const diagramData = {
                    nodes,
                    connections,
                    name: currentDiagramName,
                    lastSaved: new Date().toISOString()
                  };
                  
                  // Save the diagram data
                  localStorage.setItem(`beaUX-diagram-${diagramId}`, JSON.stringify(diagramData));
                  
                  // Save current diagram as last edited
                  localStorage.setItem('beaUX-current-diagram', JSON.stringify(diagramData));
                  
                  // Add to diagrams list
                  const updatedDiagrams = [
                    ...savedDiagrams.filter(diagram => diagram.name !== currentDiagramName), // Remove old version if it exists
                    { id: diagramId, name: currentDiagramName, timestamp: Date.now() }
                  ];
                  
                  localStorage.setItem('beaUX-saved-diagrams', JSON.stringify(updatedDiagrams));
                  setSavedDiagrams(updatedDiagrams);
                  
                  // Show success
                  setSaveSuccess(true);
                  setTimeout(() => {
                    setIsSaveModalOpen(false);
                    setSaveSuccess(false);
                  }, 1500);
                } catch (err) {
                  console.error('Failed to save diagram:', err);
                  showFeedbackToast('Error saving diagram');
                  setIsSaveModalOpen(false);
                }
              }}
            >
              <div className="mb-4">
                <label className="block text-sm font-medium mb-1">Diagram Name</label>
                <input
                  type="text"
                  value={currentDiagramName}
                  onChange={(e) => setCurrentDiagramName(e.target.value)}
                  className="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                  placeholder="My Diagram"
                  required
                />
              </div>
              
              {saveSuccess ? (
                <div className="flex items-center justify-center py-2 text-green-600">
                  <div className="bg-green-50 text-green-600 rounded-full p-1 mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <span>Diagram saved successfully!</span>
                </div>
              ) : (
                <div className="flex justify-end">
                  <button
                    type="button"
                    onClick={() => setIsSaveModalOpen(false)}
                    className="px-4 py-2 mr-2 border border-border rounded-md text-muted-foreground hover:bg-muted"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
                  >
                    Save Diagram
                  </button>
                </div>
              )}
            </form>
          </div>
        </div>
      )}
      
      {/* Connection Settings Panel */}
      {selectedConnection && (
        <div className="absolute bottom-4 right-4 bg-gray-900 rounded-lg shadow-lg border border-gray-700 p-4 w-64 z-50">
          <div className="flex justify-between items-center mb-3 border-b border-gray-700 pb-2">
            <h3 className="text-white font-medium">Connection Settings</h3>
            <button 
              onClick={() => setSelectedConnection(null)}
              className="text-gray-400 hover:text-white"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </button>
          </div>
          
          {(() => {
            const connection = connections.find(c => c.id === selectedConnection);
            if (!connection) return null;
            
            const sourceNode = nodes.find(n => n.id === connection.sourceId);
            const targetNode = nodes.find(n => n.id === connection.targetId);
            
            return (
              <>
                <div className="mb-3">
                  <div className="text-gray-400 text-sm mb-1">From</div>
                  <div className="text-white">{sourceNode?.name || 'Unknown'}</div>
                </div>
                
                <div className="mb-3">
                  <div className="text-gray-400 text-sm mb-1">To</div>
                  <div className="text-white">{targetNode?.name || 'Unknown'}</div>
                </div>
                
                <button
                  onClick={() => {
                    // Remove this connection
                    const newConnections = connections.filter(c => c.id !== selectedConnection);
                    setConnections(newConnections);
                    setSelectedConnection(null);
                    saveToHistory(nodes, newConnections);
                    showFeedbackToast("Connection deleted");
                  }}
                  className="w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-md transition-colors"
                >
                  Delete Connection
                </button>
              </>
            );
          })()}
        </div>
      )}
    </div>
  );
};

// AI prompt template for generating diagram JSON
const aiPromptTemplate = `# beaUX Diagram Generation Prompt

I need you to analyze my React component architecture and generate a JSON representation for the beaUX diagram tool. The output should follow this exact format:

\`\`\`json
{
  "nodes": [
    {
      "id": "string",
      "name": "ComponentName", 
      "position": { "x": number, "y": number },
      "color": "color-hex-code",
      "type": "component|page|hook|util",
      "code": "component-code-snippet",
      "notes": "description-or-notes"
    }
  ],
  "connections": [
    {
      "id": "string",
      "sourceId": "node-id-that-imports",
      "targetId": "node-id-being-imported",
      "label": "relationship-description"
    }
  ],
  "name": "Diagram Name"
}
\`\`\`

## Instructions

1. Analyze the component hierarchy I provide
2. Create nodes for each component, page, hook, or utility
3. Establish connections based on import/usage relationships
4. Position nodes logically (x, y coordinates between 50-800)
5. Assign appropriate colors:
   - Components: #3b82f6 (blue)
   - Pages: #10b981 (green)
   - Hooks: #8b5cf6 (purple)
   - Utils: #f59e0b (amber)
   - Notes: #ec4899 (pink)
6. Include brief code snippets and notes

## My Component Architecture

[Describe your component architecture here, starting with the root component and the key relationships]

Provide ONLY the JSON output in the exact format specified, with no additional explanations.`;

export default DiagramEditor;
</file>

</files>
